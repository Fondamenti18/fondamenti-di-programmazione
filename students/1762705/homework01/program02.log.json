{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0035219192504882812, "run_index": 0, "setup": {"name": "setup", "duration": 0.0015192031860351562, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002770423889160156, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00020647048950195312, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0034563541412353516, "run_index": 1, "setup": {"name": "setup", "duration": 0.00026798248291015625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0026199817657470703, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:77: in conv\n    return conv(int(n/1000000000)) + \"miliardi\" + conv(n%1000000000)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nE   RecursionError: maximum recursion depth exceeded in comparison\n!!! Recursion detected (same locals & position)"}, "teardown": {"name": "teardown", "duration": 0.00030040740966796875, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.003253459930419922, "run_index": 2, "setup": {"name": "setup", "duration": 0.0003001689910888672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.002366304397583008, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:77: in conv\n    return conv(int(n/1000000000)) + \"miliardi\" + conv(n%1000000000)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nE   RecursionError: maximum recursion depth exceeded in comparison\n!!! Recursion detected (same locals & position)"}, "teardown": {"name": "teardown", "duration": 0.0002868175506591797, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0011713504791259766, "run_index": 3, "setup": {"name": "setup", "duration": 0.0003001689910888672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00029659271240234375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:77: in conv\n    return conv(int(n/1000000000)) + \"miliardi\" + conv(n%1000000000)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:69: in conv\n    return conv(n/1000) + \"mila\" + conv(n%1000)\nprogram02.py:54: in conv\n    return letter + conv(n%10)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 1.0210000000000008\n\n    def conv(n):\n        'Scrivete qui il codice della funzione'\n        #numeri semplici\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n>                   \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\nE           TypeError: tuple indices must be integers or slices, not float\n\nprogram02.py:45: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00027441978454589844, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0011518001556396484, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002982616424560547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002791881561279297, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:77: in conv\n    return conv(int(n/1000000000)) + \"miliardi\" + conv(n%1000000000)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:69: in conv\n    return conv(n/1000) + \"mila\" + conv(n%1000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 13.014\n\n    def conv(n):\n        'Scrivete qui il codice della funzione'\n        #numeri semplici\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n>                   \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\nE           TypeError: tuple indices must be integers or slices, not float\n\nprogram02.py:45: TypeError"}, "teardown": {"name": "teardown", "duration": 0.0002760887145996094, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.003114938735961914, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002989768981933594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.002251863479614258, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:77: in conv\n    return conv(int(n/1000000000)) + \"miliardi\" + conv(n%1000000000)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nE   RecursionError: maximum recursion depth exceeded in comparison\n!!! Recursion detected (same locals & position)"}, "teardown": {"name": "teardown", "duration": 0.0002651214599609375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.001007080078125, "run_index": 6, "setup": {"name": "setup", "duration": 0.0002906322479248047, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000240325927734375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018548965454101562, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009529590606689453, "run_index": 7, "setup": {"name": "setup", "duration": 0.00025534629821777344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002257823944091797, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00021648406982421875, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009245872497558594, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002541542053222656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022673606872558594, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001895427703857422, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009138584136962891, "run_index": 9, "setup": {"name": "setup", "duration": 0.00025391578674316406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022292137145996094, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018310546875, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009572505950927734, "run_index": 10, "setup": {"name": "setup", "duration": 0.00025391578674316406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024771690368652344, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:69: in conv\n    return conv(n/1000) + \"mila\" + conv(n%1000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 17.081\n\n    def conv(n):\n        'Scrivete qui il codice della funzione'\n        #numeri semplici\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n>                   \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\nE           TypeError: tuple indices must be integers or slices, not float\n\nprogram02.py:45: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00020170211791992188, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0010616779327392578, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002624988555908203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026226043701171875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:69: in conv\n    return conv(n/1000) + \"mila\" + conv(n%1000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 8.818\n\n    def conv(n):\n        'Scrivete qui il codice della funzione'\n        #numeri semplici\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n>                   \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\nE           TypeError: tuple indices must be integers or slices, not float\n\nprogram02.py:45: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00027441978454589844, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0032777786254882812, "run_index": 12, "setup": {"name": "setup", "duration": 0.00029778480529785156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.002404451370239258, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nE   RecursionError: maximum recursion depth exceeded in comparison\n!!! Recursion detected (same locals & position)"}, "teardown": {"name": "teardown", "duration": 0.0002777576446533203, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0036313533782958984, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002989768981933594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0023834705352783203, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:77: in conv\n    return conv(int(n/1000000000)) + \"miliardi\" + conv(n%1000000000)\nprogram02.py:73: in conv\n    return conv(int(n/1000000)) + \"milioni\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nprogram02.py:71: in conv\n    return \"unmilione\" + conv(n%1000000)\nE   RecursionError: maximum recursion depth exceeded in comparison\n!!! Recursion detected (same locals & position)"}, "teardown": {"name": "teardown", "duration": 0.0006499290466308594, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 5, "failed": 9, "num_tests": 14, "duration": 0.31334519386291504}, "created_at": "2018-08-01 00:29:33.734740"}}