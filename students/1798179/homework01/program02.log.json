{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0031137466430664062, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013213157653808594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026297569274902344, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00020813941955566406, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0011413097381591797, "run_index": 1, "setup": {"name": "setup", "duration": 0.00026488304138183594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00039839744567871094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno' : \twhen input=(801081801081,) \nE   \t\tNone != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00021314620971679688, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.001039743423461914, "run_index": 2, "setup": {"name": "setup", "duration": 0.00026988983154296875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00029468536376953125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'sessantottomiliardiduecentocinquantottom[39 chars]otto' : \twhen input=(68258148238,) \nE   \t\tNone != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002052783966064453, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0010149478912353516, "run_index": 3, "setup": {"name": "setup", "duration": 0.00026607513427734375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002722740173339844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottantunomiliardisettantunomilioninovantunomilaventuno' : \twhen input=(81071091021,) \nE   \t\tNone != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002105236053466797, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0010159015655517578, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002684593200683594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002715587615966797, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'undicimiliardidodicimilionitredicimilaquattordici' : \twhen input=(11012013014,) \nE   \t\tNone != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020742416381835938, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0010390281677246094, "run_index": 5, "setup": {"name": "setup", "duration": 0.00027298927307128906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002880096435546875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'novantanovemiliardinovecentonovantanovem[46 chars]nove' : \twhen input=(99999999999,) \nE   \t\tNone != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020503997802734375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0009646415710449219, "run_index": 6, "setup": {"name": "setup", "duration": 0.0002684593200683594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023031234741210938, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019741058349609375, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009441375732421875, "run_index": 7, "setup": {"name": "setup", "duration": 0.00025773048400878906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002391338348388672, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001895427703857422, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009353160858154297, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002574920654296875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023221969604492188, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001881122589111328, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0011734962463378906, "run_index": 9, "setup": {"name": "setup", "duration": 0.00028634071350097656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003902912139892578, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_5>\n\n    def test_program_5(self):\n        \"non-elisione del mille e del cento\"\n        num      = 1501\n        expected = 'millecinquecentouno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'milleuno' != 'millecinquecentouno'\nE   - milleuno\nE   + millecinquecentouno\nE    : \twhen input=(1501,) \nE   \t\t'milleuno' != 'millecinquecentouno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002105236053466797, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009989738464355469, "run_index": 10, "setup": {"name": "setup", "duration": 0.00026679039001464844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025916099548339844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:43: in conv\n    x+=conv(int(n/100))+\"mila\"+conv(n%1000)\nprogram02.py:30: in conv\n    x+=\"cento\"+conv(n%100)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 70\n\n    def conv(n):\n        x=\"\"\n        y=str(n)\n        u=[\"\", \"uno\", \"due\", \"tre\", \"quattro\", \"cinque\", \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\", \"undici\", \"dodici\", \"tredici\", \"quattordici\", \"quindici\", \"sedici\", \"diciassette\", \"diciotto\", \"diciannove\"]\n        d=[\"\", \"venti\", \"trenta\", \"quaranta\", \"cinquanta\", \"sessanta\", \"settanta\", \"ottanta\", \"novanta\"]\n    \n        if n>0 and n<=19:\n            x+=u[n]\n            return x\n    \n        elif n>=20 and n<=99:\n            eccn=n%10\n            if eccn==1 or eccn==8:\n                x+=d[int(y[0])-1][:-1]+conv(n%10)\n            else:\n>               x+=d[int(y[0])-1]+conv(n%10)\nE               TypeError: must be str, not NoneType\n\nprogram02.py:23: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00020623207092285156, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0014243125915527344, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002682209014892578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000682830810546875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentottantunomilioniottantottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\nE   - novecentottantunomilioniottantottomilaottocentodiciotto\nE   ?                            ------\nE   + novecentottantunomilioniottomilaottocentodiciotto\nE    : \twhen input=(981008818,) \nE   \t\t'novecentottantunomilioniottantottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020503997802734375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0017547607421875, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002701282501220703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0010068416595458984, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'otto[13 chars]omilioniottantottomilaottocentottantottomilaottocentottantotto' != 'otto[13 chars]omilioniottocentottantottomilaottocentottantotto'\nE   - ottocentottantottomilioniottantottomilaottocentottantottomilaottocentottantotto\nE   ?                          --------------\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'ottocentottantottomilioniottantottomilaottocentottantottomilaottocentottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020766258239746094, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0013637542724609375, "run_index": 13, "setup": {"name": "setup", "duration": 0.00026917457580566406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002703666687011719, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta' : \twhen input=(808080808080,) \nE   \t\tNone != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0005550384521484375, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 4, "failed": 10, "num_tests": 14, "duration": 0.18581676483154297}, "created_at": "2018-08-01 00:30:11.854625"}}