============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /home/travis/virtualenv/python3.6.3/bin/python
cachedir: .pytest_cache
rootdir: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1810032/homework01, inifile:
plugins: timeout-1.3.1, json-0.4.0
timeout: 10.0s
timeout method: signal
timeout func_only: False
collecting ... collected 14 items

grade02.py::Test::test_program_1 PASSED                                  [  7%]
grade02.py::Test::test_program_10 FAILED                                 [ 14%]
grade02.py::Test::test_program_11 FAILED                                 [ 21%]
grade02.py::Test::test_program_12 FAILED                                 [ 28%]
grade02.py::Test::test_program_13 FAILED                                 [ 35%]
grade02.py::Test::test_program_14 FAILED                                 [ 42%]
grade02.py::Test::test_program_2 PASSED                                  [ 50%]
grade02.py::Test::test_program_3 PASSED                                  [ 57%]
grade02.py::Test::test_program_4 PASSED                                  [ 64%]
grade02.py::Test::test_program_5 PASSED                                  [ 71%]
grade02.py::Test::test_program_6 PASSED                                  [ 78%]
grade02.py::Test::test_program_7 PASSED                                  [ 85%]
grade02.py::Test::test_program_8 FAILED                                  [ 92%]
grade02.py::Test::test_program_9 FAILED                                  [100%]

=================================== FAILURES ===================================
_____________________________ Test.test_program_10 _____________________________

self = <grade02.Test testMethod=test_program_10>

    def test_program_10(self):
        'non elisioni 800-1 e elisioni 80-1'
        num      = 801081801081
        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:333: in conv
    milioni(n)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 801081801081

    def milioni(n):
        n1 = str(n)
        stringa = 'milione'
        stringa2 = 'milioni'
        if len(n1) > 8:
            if n1[-9] == '1':
                if n1[-8] != '8':
                    ls.insert(-9, 'cento' + stringa2)
                else:
                    ls.insert(-9, 'cent' + stringa2)
            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':
                if n1[-8] != '8':
                    v = unita(n,-9)
                    ls.insert(-9, v + 'cento')
                else:
                    v = unita(n,-9)
>                   ls.insert(-9, v + 'cent')
E                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'

program02.py:308: TypeError
_____________________________ Test.test_program_11 _____________________________

self = <grade02.Test testMethod=test_program_11>

    def test_program_11(self):
        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'
        num      = 68258148238
        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'
>       return self.dotest02(num, expected)

grade02.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'duecentocinquantottomilionicentoquarantqu[26 chars]otto' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'
E   - duecentocinquantottomilionicentoquarantquarantottomiladuecentotrentotto
E   ?                                        -------
E   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto
E   ? +++++++++++++++++++
E    : 	when input=(68258148238,) 
E   		'duecentocinquantottomilionicentoquarantquarantottomiladuecentotrentotto' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'	<- correct return value
_____________________________ Test.test_program_12 _____________________________

self = <grade02.Test testMethod=test_program_12>

    def test_program_12(self):
        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'
        num      = 81071091021
        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'
>       return self.dotest02(num, expected)

grade02.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:333: in conv
    milioni(n)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 81071091021

    def milioni(n):
        n1 = str(n)
        stringa = 'milione'
        stringa2 = 'milioni'
        if len(n1) > 8:
            if n1[-9] == '1':
                if n1[-8] != '8':
                    ls.insert(-9, 'cento' + stringa2)
                else:
                    ls.insert(-9, 'cent' + stringa2)
            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':
                if n1[-8] != '8':
                    v = unita(n,-9)
>                   ls.insert(-9, v + 'cento')
E                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'

program02.py:305: TypeError
_____________________________ Test.test_program_13 _____________________________

self = <grade02.Test testMethod=test_program_13>

    def test_program_13(self):
        'numeri speciali tra 10 e 20'
        num      = 11012013014
        expected = 'undicimiliardidodicimilionitredicimilaquattordici'
>       return self.dotest02(num, expected)

grade02.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:333: in conv
    milioni(n)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 11012013014

    def milioni(n):
        n1 = str(n)
        stringa = 'milione'
        stringa2 = 'milioni'
        if len(n1) > 8:
            if n1[-9] == '1':
                if n1[-8] != '8':
                    ls.insert(-9, 'cento' + stringa2)
                else:
                    ls.insert(-9, 'cent' + stringa2)
            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':
                if n1[-8] != '8':
                    v = unita(n,-9)
>                   ls.insert(-9, v + 'cento')
E                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'

program02.py:305: TypeError
_____________________________ Test.test_program_14 _____________________________

self = <grade02.Test testMethod=test_program_14>

    def test_program_14(self):
        'numero massimo da convertire'
        num      = 99999999999
        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'
>       return self.dotest02(num, expected)

grade02.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'novecentonovantnovemilioninovecentonovantnov[27 chars]nove' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'
E   - novecentonovantnovemilioninovecentonovantnovantnovemilanovecentonovantanove
E   ?                                          --- --
E   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove
E   ? +++++++++++++++++++               +
E    : 	when input=(99999999999,) 
E   		'novecentonovantnovemilioninovecentonovantnovantnovemilanovecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'	<- correct return value
_____________________________ Test.test_program_8 ______________________________

self = <grade02.Test testMethod=test_program_8>

    def test_program_8(self):
        "elisioni 800-80 e 80-8"
        num      = 888888888
        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
>       return self.dotest02(num, expected)

grade02.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentottantottomilioniottocentottantottantottomilaottocentottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
E   - ottocentottantottomilioniottocentottantottantottomilaottocentottantotto
E   ?                                           ------
E   + ottocentottantottomilioniottocentottantottomilaottocentottantotto
E    : 	when input=(888888888,) 
E   		'ottocentottantottomilioniottocentottantottantottomilaottocentottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'	<- correct return value
_____________________________ Test.test_program_9 ______________________________

self = <grade02.Test testMethod=test_program_9>

    def test_program_9(self):
        'non elisioni 800-8 e elisioni 800-80'
        num      = 808080808080
        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
>       return self.dotest02(num, expected)

grade02.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:333: in conv
    milioni(n)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 808080808080

    def milioni(n):
        n1 = str(n)
        stringa = 'milione'
        stringa2 = 'milioni'
        if len(n1) > 8:
            if n1[-9] == '1':
                if n1[-8] != '8':
                    ls.insert(-9, 'cento' + stringa2)
                else:
                    ls.insert(-9, 'cent' + stringa2)
            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':
                if n1[-8] != '8':
                    v = unita(n,-9)
                    ls.insert(-9, v + 'cento')
                else:
                    v = unita(n,-9)
>                   ls.insert(-9, v + 'cent')
E                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'

program02.py:308: TypeError
 generated json report: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1810032/homework01/program02.log.json 
====================== 7 failed, 7 passed in 0.53 seconds ======================
