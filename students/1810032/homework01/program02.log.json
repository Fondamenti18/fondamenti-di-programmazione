{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.003979206085205078, "run_index": 0, "setup": {"name": "setup", "duration": 0.0016689300537109375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003795623779296875, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002617835998535156, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001556396484375, "run_index": 1, "setup": {"name": "setup", "duration": 0.00045680999755859375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00037860870361328125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:333: in conv\n    milioni(n)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 801081801081\n\n    def milioni(n):\n        n1 = str(n)\n        stringa = 'milione'\n        stringa2 = 'milioni'\n        if len(n1) > 8:\n            if n1[-9] == '1':\n                if n1[-8] != '8':\n                    ls.insert(-9, 'cento' + stringa2)\n                else:\n                    ls.insert(-9, 'cent' + stringa2)\n            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':\n                if n1[-8] != '8':\n                    v = unita(n,-9)\n                    ls.insert(-9, v + 'cento')\n                else:\n                    v = unita(n,-9)\n>                   ls.insert(-9, v + 'cent')\nE                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n\nprogram02.py:308: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00026416778564453125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.002012014389038086, "run_index": 2, "setup": {"name": "setup", "duration": 0.0003466606140136719, "outcome": "passed"}, "call": {"name": "call", "duration": 0.001051187515258789, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'duecentocinquantottomilionicentoquarantqu[26 chars]otto' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'\nE   - duecentocinquantottomilionicentoquarantquarantottomiladuecentotrentotto\nE   ?                                        -------\nE   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE   ? +++++++++++++++++++\nE    : \twhen input=(68258148238,) \nE   \t\t'duecentocinquantottomilionicentoquarantquarantottomiladuecentotrentotto' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002675056457519531, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0010862350463867188, "run_index": 3, "setup": {"name": "setup", "duration": 0.00030684471130371094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024771690368652344, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:333: in conv\n    milioni(n)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 81071091021\n\n    def milioni(n):\n        n1 = str(n)\n        stringa = 'milione'\n        stringa2 = 'milioni'\n        if len(n1) > 8:\n            if n1[-9] == '1':\n                if n1[-8] != '8':\n                    ls.insert(-9, 'cento' + stringa2)\n                else:\n                    ls.insert(-9, 'cent' + stringa2)\n            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':\n                if n1[-8] != '8':\n                    v = unita(n,-9)\n>                   ls.insert(-9, v + 'cento')\nE                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n\nprogram02.py:305: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00022482872009277344, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0015063285827636719, "run_index": 4, "setup": {"name": "setup", "duration": 0.0003948211669921875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00042366981506347656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:333: in conv\n    milioni(n)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 11012013014\n\n    def milioni(n):\n        n1 = str(n)\n        stringa = 'milione'\n        stringa2 = 'milioni'\n        if len(n1) > 8:\n            if n1[-9] == '1':\n                if n1[-8] != '8':\n                    ls.insert(-9, 'cento' + stringa2)\n                else:\n                    ls.insert(-9, 'cent' + stringa2)\n            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':\n                if n1[-8] != '8':\n                    v = unita(n,-9)\n>                   ls.insert(-9, v + 'cento')\nE                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n\nprogram02.py:305: TypeError"}, "teardown": {"name": "teardown", "duration": 0.0002930164337158203, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0026824474334716797, "run_index": 5, "setup": {"name": "setup", "duration": 0.0005159378051757812, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0012819766998291016, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentonovantnovemilioninovecentonovantnov[27 chars]nove' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'\nE   - novecentonovantnovemilioninovecentonovantnovantnovemilanovecentonovantanove\nE   ?                                          --- --\nE   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE   ? +++++++++++++++++++               +\nE    : \twhen input=(99999999999,) \nE   \t\t'novecentonovantnovemilioninovecentonovantnovantnovemilanovecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0003685951232910156, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0016810894012451172, "run_index": 6, "setup": {"name": "setup", "duration": 0.0004246234893798828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00047898292541503906, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003528594970703125, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0011730194091796875, "run_index": 7, "setup": {"name": "setup", "duration": 0.0003542900085449219, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025081634521484375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.000213623046875, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0010693073272705078, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002620220184326172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002474784851074219, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00029778480529785156, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0012874603271484375, "run_index": 9, "setup": {"name": "setup", "duration": 0.0003902912139892578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025081634521484375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002560615539550781, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0012710094451904297, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002722740173339844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005083084106445312, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002181529998779297, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.002043008804321289, "run_index": 11, "setup": {"name": "setup", "duration": 0.0005757808685302734, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000644683837890625, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002467632293701172, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0032956600189208984, "run_index": 12, "setup": {"name": "setup", "duration": 0.0004911422729492188, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0017914772033691406, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentottantottomilioniottocentottantottantottomilaottocentottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - ottocentottantottomilioniottocentottantottantottomilaottocentottantotto\nE   ?                                           ------\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'ottocentottantottomilioniottocentottantottantottomilaottocentottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0005218982696533203, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.002077817916870117, "run_index": 13, "setup": {"name": "setup", "duration": 0.0004775524139404297, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003559589385986328, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:333: in conv\n    milioni(n)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 808080808080\n\n    def milioni(n):\n        n1 = str(n)\n        stringa = 'milione'\n        stringa2 = 'milioni'\n        if len(n1) > 8:\n            if n1[-9] == '1':\n                if n1[-8] != '8':\n                    ls.insert(-9, 'cento' + stringa2)\n                else:\n                    ls.insert(-9, 'cent' + stringa2)\n            if n1[-9] == '0' or n1[-9] == '2' or n1[-9] == '3' or n1[-9] == '4' or n1[-9] == '5' or n1[-9] == '6' or n1[-9] == '7' or n1[-9] == '8' or n1[-9] == '9':\n                if n1[-8] != '8':\n                    v = unita(n,-9)\n                    ls.insert(-9, v + 'cento')\n                else:\n                    v = unita(n,-9)\n>                   ls.insert(-9, v + 'cent')\nE                   TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'\n\nprogram02.py:308: TypeError"}, "teardown": {"name": "teardown", "duration": 0.000766754150390625, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 7, "failed": 7, "num_tests": 14, "duration": 0.523231029510498}, "created_at": "2018-08-01 00:30:49.649120"}}