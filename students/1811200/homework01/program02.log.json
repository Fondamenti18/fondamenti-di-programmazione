{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0032813549041748047, "run_index": 0, "setup": {"name": "setup", "duration": 0.001322031021118164, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00042629241943359375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_1>\n\n    def test_program_1(self):\n        \"numero semplice senza elisioni\"\n        num      = 3\n        expected = 'tre'\n>       return self.dotest02(num, expected)\n\ngrade02.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: ['tre'] != 'tre' : \twhen input=(3,) \nE   \t\t['tre'] != 'tre'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002110004425048828, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0010058879852294922, "run_index": 1, "setup": {"name": "setup", "duration": 0.0002646446228027344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002722740173339844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno' : \twhen input=(801081801081,) \nE   \t\tNone != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020432472229003906, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0010118484497070312, "run_index": 2, "setup": {"name": "setup", "duration": 0.0002627372741699219, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028324127197265625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'sessantottomiliardiduecentocinquantottom[39 chars]otto' : \twhen input=(68258148238,) \nE   \t\tNone != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020313262939453125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0010528564453125, "run_index": 3, "setup": {"name": "setup", "duration": 0.00029397010803222656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002627372741699219, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottantunomiliardisettantunomilioninovantunomilaventuno' : \twhen input=(81071091021,) \nE   \t\tNone != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.000202178955078125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0009906291961669922, "run_index": 4, "setup": {"name": "setup", "duration": 0.00026154518127441406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002601146697998047, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'undicimiliardidodicimilionitredicimilaquattordici' : \twhen input=(11012013014,) \nE   \t\tNone != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020742416381835938, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.001003265380859375, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002624988555908203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002765655517578125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'novantanovemiliardinovecentonovantanovem[46 chars]nove' : \twhen input=(99999999999,) \nE   \t\tNone != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020170211791992188, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0010004043579101562, "run_index": 6, "setup": {"name": "setup", "duration": 0.00026679039001464844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026607513427734375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_2>\n\n    def test_program_2(self):\n        \"numero speciale tra 10 e 20\"\n        num      = 17\n        expected = 'diciassette'\n>       return self.dotest02(num, expected)\n\ngrade02.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: ['diciasette'] != 'diciassette' : \twhen input=(17,) \nE   \t\t['diciasette'] != 'diciassette'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020074844360351562, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009996891021728516, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002605915069580078, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002758502960205078, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_3>\n\n    def test_program_3(self):\n        \"non-elisione del cento e elisione del venti-otto\"\n        num      = 128\n        expected = 'centoventotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:85: in conv\n    return cento(n)\nprogram02.py:54: in cento\n    return(lettere + decine(n%100))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 28\n\n    def decine(n):\n         decine=[\"venti\",\"trenta\",\"quaranta\",\"cinquanta\",\"sessanta\",\"settanta\",\"ottanta\",\"novanta\"]\n         lettere= decine[int(n/10)-2]\n         p=n%10\n         if p==1 or p==8:\n             lettere=lettere[:-1]\n>        return lettere + numeri_fino_a_venti(n%10)\nE        TypeError: must be str, not list\n\nprogram02.py:45: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00020265579223632812, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.000972747802734375, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002636909484863281, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024390220642089844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_4>\n\n    def test_program_4(self):\n        \"non-elisione del cento\"\n        num      = 508\n        expected = 'cinquecentootto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:87: in conv\n    return centinaia(n)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 508\n\n    def centinaia(n):\n        lettere=[\"cento\"]\n        p=n%100\n        p=int(p/10)\n        if n<=999:\n            lettere=[\"cento\"]\n            if p==1 or p==8:\n             lettere=lettere[:-1]\n>           return (numeri_fino_a_venti + lettere + decine)\nE           TypeError: unsupported operand type(s) for +: 'function' and 'list'\n\nprogram02.py:68: TypeError"}, "teardown": {"name": "teardown", "duration": 0.0002014636993408203, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0010097026824951172, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002627372741699219, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026154518127441406, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_5>\n\n    def test_program_5(self):\n        \"non-elisione del mille e del cento\"\n        num      = 1501\n        expected = 'millecinquecentouno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'millecinquecentouno' : \twhen input=(1501,) \nE   \t\tNone != 'millecinquecentouno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00022268295288085938, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.000993490219116211, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002639293670654297, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002617835998535156, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'diciassettemilaottantuno' : \twhen input=(17081,) \nE   \t\tNone != 'diciassettemilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020384788513183594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0010142326354980469, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002620220184326172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028896331787109375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'novecentottantunomilioniottomilaottocentodiciotto' : \twhen input=(981008818,) \nE   \t\tNone != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020122528076171875, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.000989675521850586, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002624988555908203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026226043701171875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto' : \twhen input=(888888888,) \nE   \t\tNone != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020241737365722656, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0013363361358642578, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002624988555908203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002620220184326172, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta' : \twhen input=(808080808080,) \nE   \t\tNone != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00054931640625, "outcome": "passed"}, "outcome": "failed"}], "summary": {"failed": 14, "num_tests": 14, "duration": 0.2246394157409668}, "created_at": "2018-08-01 00:30:53.981774"}}