============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /home/travis/virtualenv/python3.6.3/bin/python
cachedir: .pytest_cache
rootdir: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1814255/homework01, inifile:
plugins: timeout-1.3.1, json-0.4.0
timeout: 10.0s
timeout method: signal
timeout func_only: False
collecting ... collected 14 items

grade02.py::Test::test_program_1 PASSED                                  [  7%]
grade02.py::Test::test_program_10 FAILED                                 [ 14%]
grade02.py::Test::test_program_11 FAILED                                 [ 21%]
grade02.py::Test::test_program_12 FAILED                                 [ 28%]
grade02.py::Test::test_program_13 FAILED                                 [ 35%]
grade02.py::Test::test_program_14 FAILED                                 [ 42%]
grade02.py::Test::test_program_2 PASSED                                  [ 50%]
grade02.py::Test::test_program_3 PASSED                                  [ 57%]
grade02.py::Test::test_program_4 PASSED                                  [ 64%]
grade02.py::Test::test_program_5 PASSED                                  [ 71%]
grade02.py::Test::test_program_6 PASSED                                  [ 78%]
grade02.py::Test::test_program_7 PASSED                                  [ 85%]
grade02.py::Test::test_program_8 FAILED                                  [ 92%]
grade02.py::Test::test_program_9 FAILED                                  [100%]

=================================== FAILURES ===================================
_____________________________ Test.test_program_10 _____________________________

self = <grade02.Test testMethod=test_program_10>

    def test_program_10(self):
        'non elisioni 800-1 e elisioni 80-1'
        num      = 801081801081
        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: None != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno' : 	when input=(801081801081,) 
E   		None != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'	<- correct return value
_____________________________ Test.test_program_11 _____________________________

self = <grade02.Test testMethod=test_program_11>

    def test_program_11(self):
        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'
        num      = 68258148238
        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'
>       return self.dotest02(num, expected)

grade02.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:105: in conv
    return conv(n/10000000000)+'miliardi'+conv(n%10000000000)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 6.8258148238

    def conv (n):
        l= {28:'ventotto', 38:'trentotto', 48:'quarantotto', 58:'cinquantotto', 68:'sessantotto', 78:'settantotto', 88:'ottantotto', 98:'novantotto', 99:'novantanove', 1:'uno', 2:'due', 3:'tre', 4:'quattro', 5:'cinque', 6:'sei', 7:'sette', 8:'otto', 9:'nove', 10:'dieci', 11:'undici', 12:'dodici', 13:'tredici', 14:'quattordici', 15:'quindici', 16:'sedici', 17:'diciassette', 18:'diciotto', 19:'diciannove', 20:'venti', 30:'trenta', 40:'quaranta', 50:'cinquanta', 60:'sessanta', 70:'settanta', 80:'ottanta', 90:'novanta', 100:'cento', 0:'zero', 21:'ventuno', 31:'trentuno', 41:'quarantuno', 51:'cinquantuno', 61:'sessantuno', 71:'settantuno', 81:'ottantuno', 91:'novantuno', 1000:'mille'}
        assert (0<= n)
        if(n<=20):
>           return l[n]
E           KeyError: 6.8258148238

program02.py:38: KeyError
_____________________________ Test.test_program_12 _____________________________

self = <grade02.Test testMethod=test_program_12>

    def test_program_12(self):
        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'
        num      = 81071091021
        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'
>       return self.dotest02(num, expected)

grade02.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:105: in conv
    return conv(n/10000000000)+'miliardi'+conv(n%10000000000)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 8.1071091021

    def conv (n):
        l= {28:'ventotto', 38:'trentotto', 48:'quarantotto', 58:'cinquantotto', 68:'sessantotto', 78:'settantotto', 88:'ottantotto', 98:'novantotto', 99:'novantanove', 1:'uno', 2:'due', 3:'tre', 4:'quattro', 5:'cinque', 6:'sei', 7:'sette', 8:'otto', 9:'nove', 10:'dieci', 11:'undici', 12:'dodici', 13:'tredici', 14:'quattordici', 15:'quindici', 16:'sedici', 17:'diciassette', 18:'diciotto', 19:'diciannove', 20:'venti', 30:'trenta', 40:'quaranta', 50:'cinquanta', 60:'sessanta', 70:'settanta', 80:'ottanta', 90:'novanta', 100:'cento', 0:'zero', 21:'ventuno', 31:'trentuno', 41:'quarantuno', 51:'cinquantuno', 61:'sessantuno', 71:'settantuno', 81:'ottantuno', 91:'novantuno', 1000:'mille'}
        assert (0<= n)
        if(n<=20):
>           return l[n]
E           KeyError: 8.1071091021

program02.py:38: KeyError
_____________________________ Test.test_program_13 _____________________________

self = <grade02.Test testMethod=test_program_13>

    def test_program_13(self):
        'numeri speciali tra 10 e 20'
        num      = 11012013014
        expected = 'undicimiliardidodicimilionitredicimilaquattordici'
>       return self.dotest02(num, expected)

grade02.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:105: in conv
    return conv(n/10000000000)+'miliardi'+conv(n%10000000000)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 1.1012013014

    def conv (n):
        l= {28:'ventotto', 38:'trentotto', 48:'quarantotto', 58:'cinquantotto', 68:'sessantotto', 78:'settantotto', 88:'ottantotto', 98:'novantotto', 99:'novantanove', 1:'uno', 2:'due', 3:'tre', 4:'quattro', 5:'cinque', 6:'sei', 7:'sette', 8:'otto', 9:'nove', 10:'dieci', 11:'undici', 12:'dodici', 13:'tredici', 14:'quattordici', 15:'quindici', 16:'sedici', 17:'diciassette', 18:'diciotto', 19:'diciannove', 20:'venti', 30:'trenta', 40:'quaranta', 50:'cinquanta', 60:'sessanta', 70:'settanta', 80:'ottanta', 90:'novanta', 100:'cento', 0:'zero', 21:'ventuno', 31:'trentuno', 41:'quarantuno', 51:'cinquantuno', 61:'sessantuno', 71:'settantuno', 81:'ottantuno', 91:'novantuno', 1000:'mille'}
        assert (0<= n)
        if(n<=20):
>           return l[n]
E           KeyError: 1.1012013014

program02.py:38: KeyError
_____________________________ Test.test_program_14 _____________________________

self = <grade02.Test testMethod=test_program_14>

    def test_program_14(self):
        'numero massimo da convertire'
        num      = 99999999999
        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'
>       return self.dotest02(num, expected)

grade02.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:105: in conv
    return conv(n/10000000000)+'miliardi'+conv(n%10000000000)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 9.9999999999

    def conv (n):
        l= {28:'ventotto', 38:'trentotto', 48:'quarantotto', 58:'cinquantotto', 68:'sessantotto', 78:'settantotto', 88:'ottantotto', 98:'novantotto', 99:'novantanove', 1:'uno', 2:'due', 3:'tre', 4:'quattro', 5:'cinque', 6:'sei', 7:'sette', 8:'otto', 9:'nove', 10:'dieci', 11:'undici', 12:'dodici', 13:'tredici', 14:'quattordici', 15:'quindici', 16:'sedici', 17:'diciassette', 18:'diciotto', 19:'diciannove', 20:'venti', 30:'trenta', 40:'quaranta', 50:'cinquanta', 60:'sessanta', 70:'settanta', 80:'ottanta', 90:'novanta', 100:'cento', 0:'zero', 21:'ventuno', 31:'trentuno', 41:'quarantuno', 51:'cinquantuno', 61:'sessantuno', 71:'settantuno', 81:'ottantuno', 91:'novantuno', 1000:'mille'}
        assert (0<= n)
        if(n<=20):
>           return l[n]
E           KeyError: 9.9999999999

program02.py:38: KeyError
_____________________________ Test.test_program_8 ______________________________

self = <grade02.Test testMethod=test_program_8>

    def test_program_8(self):
        "elisioni 800-80 e 80-8"
        num      = 888888888
        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
>       return self.dotest02(num, expected)

grade02.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentoottantottomilioniottocentoottantottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
E   - ottocentoottantottomilioniottocentoottantottomilaottocentoottantotto
E   ?         -                          -                      -
E   + ottocentottantottomilioniottocentottantottomilaottocentottantotto
E    : 	when input=(888888888,) 
E   		'ottocentoottantottomilioniottocentoottantottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'	<- correct return value
_____________________________ Test.test_program_9 ______________________________

self = <grade02.Test testMethod=test_program_9>

    def test_program_9(self):
        'non elisioni 800-8 e elisioni 800-80'
        num      = 808080808080
        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
>       return self.dotest02(num, expected)

grade02.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: None != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta' : 	when input=(808080808080,) 
E   		None != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'	<- correct return value
 generated json report: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1814255/homework01/program02.log.json 
====================== 7 failed, 7 passed in 0.17 seconds ======================
