{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0031664371490478516, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013484954833984375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002646446228027344, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002048015594482422, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0012259483337402344, "run_index": 1, "setup": {"name": "setup", "duration": 0.00036263465881347656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002903938293457031, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno' : \twhen input=(801081801081,) \nE   \t\tNone != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00021028518676757812, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0010576248168945312, "run_index": 2, "setup": {"name": "setup", "duration": 0.0002675056457519531, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00031876564025878906, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'sessantottomiliardiduecentocinquantottom[39 chars]otto' : \twhen input=(68258148238,) \nE   \t\tNone != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020384788513183594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.000990152359008789, "run_index": 3, "setup": {"name": "setup", "duration": 0.00026035308837890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002658367156982422, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottantunomiliardisettantunomilioninovantunomilaventuno' : \twhen input=(81071091021,) \nE   \t\tNone != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020360946655273438, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0010216236114501953, "run_index": 4, "setup": {"name": "setup", "duration": 0.00026106834411621094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026607513427734375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'undicimiliardidodicimilionitredicimilaquattordici' : \twhen input=(11012013014,) \nE   \t\tNone != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002334117889404297, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0010094642639160156, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002624988555908203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028204917907714844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'novantanovemiliardinovecentonovantanovem[46 chars]nove' : \twhen input=(99999999999,) \nE   \t\tNone != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020241737365722656, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0009644031524658203, "run_index": 6, "setup": {"name": "setup", "duration": 0.0002617835998535156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002551078796386719, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001857280731201172, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009267330169677734, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002536773681640625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022935867309570312, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001900196075439453, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009186267852783203, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002524852752685547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022649765014648438, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018715858459472656, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009310245513916016, "run_index": 9, "setup": {"name": "setup", "duration": 0.00025534629821777344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002357959747314453, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018453598022460938, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009267330169677734, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002529621124267578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023651123046875, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001842975616455078, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0009553432464599609, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002567768096923828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002474784851074219, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019431114196777344, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0009887218475341797, "run_index": 12, "setup": {"name": "setup", "duration": 0.00025272369384765625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002753734588623047, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:58: in conv\n    return centomila_inp(n,stringa,dict1)\nprogram02.py:243: in centomila_inp\n    stringapp2=diecimila_novantanovemila(numparte2,stringa,dict1)\nprogram02.py:222: in diecimila_novantanovemila\n    stringa+=dict6[int(num3[1])]+'mila'+dict5[2]+venti_cento(int(num3[3:]),stringa,dict1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 888, stringa = '', dict1 = {0: 'zero', 1: 'uno', 2: 'due', 3: 'tre', ...}\n\n    def venti_cento(n,stringa,dict1):\n           num=str(n) #numero trasformato in stringa\n           n1= n-int(num[-1])\n           n2= int(num[-1])\n>          primoElemento= dict1[n1]\nE          KeyError: 880\n\nprogram02.py:70: KeyError"}, "teardown": {"name": "teardown", "duration": 0.0002079010009765625, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.001378774642944336, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002665519714355469, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002675056457519531, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta' : \twhen input=(808080808080,) \nE   \t\tNone != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0005781650543212891, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 7, "failed": 7, "num_tests": 14, "duration": 0.17856407165527344}, "created_at": "2018-08-01 00:31:14.154280"}}