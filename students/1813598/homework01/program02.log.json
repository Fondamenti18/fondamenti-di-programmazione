{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0031936168670654297, "run_index": 0, "setup": {"name": "setup", "duration": 0.001363515853881836, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026226043701171875, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00020432472229003906, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0010728836059570312, "run_index": 1, "setup": {"name": "setup", "duration": 0.00026416778564453125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003476142883300781, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019693374633789062, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0009524822235107422, "run_index": 2, "setup": {"name": "setup", "duration": 0.00026035308837890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002422332763671875, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001895427703857422, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0009407997131347656, "run_index": 3, "setup": {"name": "setup", "duration": 0.00025773048400878906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023627281188964844, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018906593322753906, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0009946823120117188, "run_index": 4, "setup": {"name": "setup", "duration": 0.00028824806213378906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022935867309570312, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001888275146484375, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.000997304916381836, "run_index": 5, "setup": {"name": "setup", "duration": 0.00028514862060546875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023889541625976562, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001881122589111328, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0009641647338867188, "run_index": 6, "setup": {"name": "setup", "duration": 0.0002598762512207031, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002193450927734375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.000225067138671875, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009284019470214844, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002574920654296875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022673606872558594, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018668174743652344, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009255409240722656, "run_index": 8, "setup": {"name": "setup", "duration": 0.00025653839111328125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022530555725097656, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018715858459472656, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009300708770751953, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002560615539550781, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002315044403076172, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018644332885742188, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009319782257080078, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002582073211669922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002281665802001953, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018739700317382812, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0010128021240234375, "run_index": 11, "setup": {"name": "setup", "duration": 0.00025653839111328125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028014183044433594, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:67: in conv\n    return conv(int(n/1000000))+\"milioni\" +conv(n%1000000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 981\n\n    def conv(n):\n        if n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            scrittura= decine[int(n/10)-2]\n            d = n%10\n            if d == 1 or d== 8:\n                scrittura = scrittura[:-1]\n            return scrittura+ conv(n%10)\n        elif n <= 199:\n            return \"cento\" + conv(n%100)\n        elif n <= 999:\n            c= n%100\n            c= int(c/10)\n            scrittura = \"cento\"\n            if c== 8:\n>               scrittura = scrittura - \"o\"\nE               TypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nprogram02.py:58: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00021958351135253906, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0010004043579101562, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002715587615966797, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002524852752685547, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:67: in conv\n    return conv(int(n/1000000))+\"milioni\" +conv(n%1000000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 888\n\n    def conv(n):\n        if n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            scrittura= decine[int(n/10)-2]\n            d = n%10\n            if d == 1 or d== 8:\n                scrittura = scrittura[:-1]\n            return scrittura+ conv(n%10)\n        elif n <= 199:\n            return \"cento\" + conv(n%100)\n        elif n <= 999:\n            c= n%100\n            c= int(c/10)\n            scrittura = \"cento\"\n            if c== 8:\n>               scrittura = scrittura - \"o\"\nE               TypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nprogram02.py:58: TypeError"}, "teardown": {"name": "teardown", "duration": 0.0002048015594482422, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0019867420196533203, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002658367156982422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0008733272552490234, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'otto[13 chars]ardiottantadiciannovemilioniottocentoottomilaottantadiciannove' != 'otto[13 chars]ardiottantamilioniottocentoottomilaottanta'\nE   - ottocentoottomiliardiottantadiciannovemilioniottocentoottomilaottantadiciannove\nE   ?                             ----------                               ----------\nE   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta\nE    : \twhen input=(808080808080,) \nE   \t\t'ottocentoottomiliardiottantadiciannovemilioniottocentoottomilaottantadiciannove' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0005817413330078125, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 11, "failed": 3, "num_tests": 14, "duration": 0.11552286148071289}, "created_at": "2018-08-01 00:31:03.014199"}}