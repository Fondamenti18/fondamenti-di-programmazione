{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.003466367721557617, "run_index": 0, "setup": {"name": "setup", "duration": 0.0014300346374511719, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002834796905517578, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003228187561035156, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0015573501586914062, "run_index": 1, "setup": {"name": "setup", "duration": 0.0002684593200683594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0007507801055908203, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentomilamilleuno' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\nE   - ottocentomilamilleuno\nE   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno\nE    : \twhen input=(801081801081,) \nE   \t\t'ottocentomilamilleuno' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002696514129638672, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0015473365783691406, "run_index": 2, "setup": {"name": "setup", "duration": 0.0003044605255126953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005273818969726562, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'centomilaottomiladuecentotrentotto' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'\nE   - centomilaottomiladuecentotrentotto\nE   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE    : \twhen input=(68258148238,) \nE   \t\t'centomilaottomiladuecentotrentotto' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00041103363037109375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.002086639404296875, "run_index": 3, "setup": {"name": "setup", "duration": 0.0005230903625488281, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0007803440093994141, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'milleventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\nE   - milleventuno\nE   + ottantunomiliardisettantunomilioninovantunomilaventuno\nE    : \twhen input=(81071091021,) \nE   \t\t'milleventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002601146697998047, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0013451576232910156, "run_index": 4, "setup": {"name": "setup", "duration": 0.0003008842468261719, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00047898292541503906, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'tredicimiladuemilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\nE   - tredicimiladuemilaquattordici\nE   + undicimiliardidodicimilionitredicimilaquattordici\nE    : \twhen input=(11012013014,) \nE   \t\t'tredicimiladuemilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002644062042236328, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0013549327850341797, "run_index": 5, "setup": {"name": "setup", "duration": 0.0003001689910888672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004906654357910156, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentomilanovemilanovecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'\nE   - novecentomilanovemilanovecentonovantanove\nE   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE    : \twhen input=(99999999999,) \nE   \t\t'novecentomilanovemilanovecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002639293670654297, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0010564327239990234, "run_index": 6, "setup": {"name": "setup", "duration": 0.00030112266540527344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002582073211669922, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019598007202148438, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009517669677734375, "run_index": 7, "setup": {"name": "setup", "duration": 0.00026345252990722656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023603439331054688, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001888275146484375, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0012347698211669922, "run_index": 8, "setup": {"name": "setup", "duration": 0.00026679039001464844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004630088806152344, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_4>\n\n    def test_program_4(self):\n        \"non-elisione del cento\"\n        num      = 508\n        expected = 'cinquecentootto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'quatrocentootto' != 'cinquecentootto'\nE   - quatrocentootto\nE   ?   ^^^^\nE   + cinquecentootto\nE   ? +++  ^\nE    : \twhen input=(508,) \nE   \t\t'quatrocentootto' != 'cinquecentootto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00023818016052246094, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0013375282287597656, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002884864807128906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005013942718505859, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_5>\n\n    def test_program_5(self):\n        \"non-elisione del mille e del cento\"\n        num      = 1501\n        expected = 'millecinquecentouno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'millequatrocentouno' != 'millecinquecentouno'\nE   - millequatrocentouno\nE   ?        ^^^^\nE   + millecinquecentouno\nE   ?      +++  ^\nE    : \twhen input=(1501,) \nE   \t\t'millequatrocentouno' != 'millecinquecentouno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00025916099548339844, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.001344919204711914, "run_index": 10, "setup": {"name": "setup", "duration": 0.00028824806213378906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005242824554443359, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciassettemilaseimilauno' != 'diciassettemilaottantuno'\nE   - diciassettemilaseimilauno\nE   ?                ^^^^^^\nE   + diciassettemilaottantuno\nE   ?                ^^^ ++\nE    : \twhen input=(17081,) \nE   \t\t'diciassettemilaseimilauno' != 'diciassettemilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.000244140625, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.001237630844116211, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002982616424560547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000431060791015625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\nE   - ottomilaottocentodiciotto\nE   + novecentottantunomilioniottomilaottocentodiciotto\nE    : \twhen input=(981008818,) \nE   \t\t'ottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00021004676818847656, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.001641988754272461, "run_index": 12, "setup": {"name": "setup", "duration": 0.00030684471130371094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0007796287536621094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentomilaottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - ottocentomilaottomilaottocentoottantotto\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'ottocentomilaottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002486705780029297, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0017185211181640625, "run_index": 13, "setup": {"name": "setup", "duration": 0.0003304481506347656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00046133995056152344, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentomilaottomilaottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\nE   - ottocentomilaottomilaottanta\nE   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta\nE    : \twhen input=(808080808080,) \nE   \t\t'ottocentomilaottomilaottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0005962848663330078, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 3, "failed": 11, "num_tests": 14, "duration": 0.21393132209777832}, "created_at": "2018-08-01 00:29:01.609063"}}