============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /home/travis/virtualenv/python3.6.3/bin/python
cachedir: .pytest_cache
rootdir: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1694493/homework01, inifile:
plugins: timeout-1.3.1, json-0.4.0
timeout: 10.0s
timeout method: signal
timeout func_only: False
collecting ... collected 14 items

grade02.py::Test::test_program_1 PASSED                                  [  7%]
grade02.py::Test::test_program_10 FAILED                                 [ 14%]
grade02.py::Test::test_program_11 FAILED                                 [ 21%]
grade02.py::Test::test_program_12 FAILED                                 [ 28%]
grade02.py::Test::test_program_13 FAILED                                 [ 35%]
grade02.py::Test::test_program_14 PASSED                                 [ 42%]
grade02.py::Test::test_program_2 PASSED                                  [ 50%]
grade02.py::Test::test_program_3 FAILED                                  [ 57%]
grade02.py::Test::test_program_4 PASSED                                  [ 64%]
grade02.py::Test::test_program_5 FAILED                                  [ 71%]
grade02.py::Test::test_program_6 PASSED                                  [ 78%]
grade02.py::Test::test_program_7 FAILED                                  [ 85%]
grade02.py::Test::test_program_8 FAILED                                  [ 92%]
grade02.py::Test::test_program_9 FAILED                                  [100%]

=================================== FAILURES ===================================
_____________________________ Test.test_program_10 _____________________________

self = <grade02.Test testMethod=test_program_10>

    def test_program_10(self):
        'non elisioni 800-1 e elisioni 80-1'
        num      = 801081801081
        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentodieciunomiliardicentoottantunomilioniottocentunomilaottantuno' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
E   - ottocentodieciunomiliardicentoottantunomilioniottocentunomilaottantuno
E   ?          -----           -----
E   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno
E   ?                                             +
E    : 	when input=(801081801081,) 
E   		'ottocentodieciunomiliardicentoottantunomilioniottocentunomilaottantuno' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'	<- correct return value
_____________________________ Test.test_program_11 _____________________________

self = <grade02.Test testMethod=test_program_11>

    def test_program_11(self):
        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'
        num      = 68258148238
        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'
>       return self.dotest02(num, expected)

grade02.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'sessantaottomiliardiduecentocinquantaottomilioni[35 chars]otto' != 'sessantottomiliardiduecentocinquantottomilionice[31 chars]otto'
E   - sessantaottomiliardiduecentocinquantaottomilionicentoquarantaottomiladuecentotrentaotto
E   ?        -                            -                       -                     -
E   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto
E    : 	when input=(68258148238,) 
E   		'sessantaottomiliardiduecentocinquantaottomilionicentoquarantaottomiladuecentotrentaotto' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'	<- correct return value
_____________________________ Test.test_program_12 _____________________________

self = <grade02.Test testMethod=test_program_12>

    def test_program_12(self):
        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'
        num      = 81071091021
        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'
>       return self.dotest02(num, expected)

grade02.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottantunomiliardicentosettantunomilioninovantunomilaventiuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'
E   - ottantunomiliardicentosettantunomilioninovantunomilaventiuno
E   ?                  -----                                  -
E   + ottantunomiliardisettantunomilioninovantunomilaventuno
E    : 	when input=(81071091021,) 
E   		'ottantunomiliardicentosettantunomilioninovantunomilaventiuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'	<- correct return value
_____________________________ Test.test_program_13 _____________________________

self = <grade02.Test testMethod=test_program_13>

    def test_program_13(self):
        'numeri speciali tra 10 e 20'
        num      = 11012013014
        expected = 'undicimiliardidodicimilionitredicimilaquattordici'
>       return self.dotest02(num, expected)

grade02.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'undicimiliardicentodieciduemilionitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'
E   - undicimiliardicentodieciduemilionitredicimilaquattordici
E   ?               ^^^^   -  ---
E   + undicimiliardidodicimilionitredicimilaquattordici
E   ?               ^
E    : 	when input=(11012013014,) 
E   		'undicimiliardicentodieciduemilionitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'	<- correct return value
_____________________________ Test.test_program_3 ______________________________

self = <grade02.Test testMethod=test_program_3>

    def test_program_3(self):
        "non-elisione del cento e elisione del venti-otto"
        num      = 128
        expected = 'centoventotto'
>       return self.dotest02(num, expected)

grade02.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'centoventiotto' != 'centoventotto'
E   - centoventiotto
E   ?          -
E   + centoventotto
E    : 	when input=(128,) 
E   		'centoventiotto' != 'centoventotto'	<- correct return value
_____________________________ Test.test_program_5 ______________________________

self = <grade02.Test testMethod=test_program_5>

    def test_program_5(self):
        "non-elisione del mille e del cento"
        num      = 1501
        expected = 'millecinquecentouno'
>       return self.dotest02(num, expected)

grade02.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'millecinquecentuno' != 'millecinquecentouno'
E   - millecinquecentuno
E   + millecinquecentouno
E   ?                +
E    : 	when input=(1501,) 
E   		'millecinquecentuno' != 'millecinquecentouno'	<- correct return value
_____________________________ Test.test_program_7 ______________________________

self = <grade02.Test testMethod=test_program_7>

    def test_program_7(self):
        "numero grande con molte elisioni e non-elisioni"
        num      = 981008818
        expected = 'novecentottantunomilioniottomilaottocentodiciotto'
>       return self.dotest02(num, expected)

grade02.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'novecentoottantunmilioneottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'
E   - novecentoottantunmilioneottomilaottocentodiciotto
E   ?          -             ^
E   + novecentottantunomilioniottomilaottocentodiciotto
E   ?                 +      ^
E    : 	when input=(981008818,) 
E   		'novecentoottantunmilioneottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'	<- correct return value
_____________________________ Test.test_program_8 ______________________________

self = <grade02.Test testMethod=test_program_8>

    def test_program_8(self):
        "elisioni 800-80 e 80-8"
        num      = 888888888
        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
>       return self.dotest02(num, expected)

grade02.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentoottantaottomilioniottocentoottantaottomilaottocentoottantaotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
E   - ottocentoottantaottomilioniottocentoottantaottomilaottocentoottantaotto
E   ?          -     -                    -     -                 -     -
E   + ottocentottantottomilioniottocentottantottomilaottocentottantotto
E    : 	when input=(888888888,) 
E   		'ottocentoottantaottomilioniottocentoottantaottomilaottocentoottantaotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'	<- correct return value
_____________________________ Test.test_program_9 ______________________________

self = <grade02.Test testMethod=test_program_9>

    def test_program_9(self):
        'non elisioni 800-8 e elisioni 800-80'
        num      = 808080808080
        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
>       return self.dotest02(num, expected)

grade02.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentoottantaottomiliardicentoottantamilioniottocentoottomilaottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
E   - ottocentoottantaottomiliardicentoottantamilioniottocentoottomilaottanta
E   ?             -------         -----
E   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta
E    : 	when input=(808080808080,) 
E   		'ottocentoottantaottomiliardicentoottantamilioniottocentoottomilaottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'	<- correct return value
 generated json report: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1694493/homework01/program02.log.json 
====================== 9 failed, 5 passed in 0.18 seconds ======================
