{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0036444664001464844, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013997554779052734, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005636215209960938, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_1>\n\n    def test_program_1(self):\n        \"numero semplice senza elisioni\"\n        num      = 3\n        expected = 'tre'\n>       return self.dotest02(num, expected)\n\ngrade02.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'tre'\nE   - diciannove\nE   + tre\nE    : \twhen input=(3,) \nE   \t\t'diciannove' != 'tre'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00028133392333984375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0012867450714111328, "run_index": 1, "setup": {"name": "setup", "duration": 0.00030517578125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00040984153747558594, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\nE   - diciannove\nE   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno\nE    : \twhen input=(801081801081,) \nE   \t\t'diciannove' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002665519714355469, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0013108253479003906, "run_index": 2, "setup": {"name": "setup", "duration": 0.00030231475830078125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00043272972106933594, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'\nE   - diciannove\nE   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE    : \twhen input=(68258148238,) \nE   \t\t'diciannove' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002734661102294922, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0012326240539550781, "run_index": 3, "setup": {"name": "setup", "duration": 0.0002899169921875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004222393035888672, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\nE   - diciannove\nE   + ottantunomiliardisettantunomilioninovantunomilaventuno\nE    : \twhen input=(81071091021,) \nE   \t\t'diciannove' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00023055076599121094, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0012309551239013672, "run_index": 4, "setup": {"name": "setup", "duration": 0.00029206275939941406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000385284423828125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'undicimiliardidodicimilionitredicimilaquattordici'\nE   - diciannove\nE   + undicimiliardidodicimilionitredicimilaquattordici\nE    : \twhen input=(11012013014,) \nE   \t\t'diciannove' != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00026154518127441406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0013773441314697266, "run_index": 5, "setup": {"name": "setup", "duration": 0.0003426074981689453, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00043487548828125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'novantanovemiliardinovecentonovantanovemi[45 chars]nove'\nE   - diciannove\nE   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE    : \twhen input=(99999999999,) \nE   \t\t'diciannove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00025725364685058594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.001276254653930664, "run_index": 6, "setup": {"name": "setup", "duration": 0.00030112266540527344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004343986511230469, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_2>\n\n    def test_program_2(self):\n        \"numero speciale tra 10 e 20\"\n        num      = 17\n        expected = 'diciassette'\n>       return self.dotest02(num, expected)\n\ngrade02.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'diciassette'\nE   - diciannove\nE   + diciassette\nE    : \twhen input=(17,) \nE   \t\t'diciannove' != 'diciassette'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002396106719970703, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.001268148422241211, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002872943878173828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00046133995056152344, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_3>\n\n    def test_program_3(self):\n        \"non-elisione del cento e elisione del venti-otto\"\n        num      = 128\n        expected = 'centoventotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'centoventotto'\nE   - diciannove\nE   + centoventotto\nE    : \twhen input=(128,) \nE   \t\t'diciannove' != 'centoventotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00023221969604492188, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0012025833129882812, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002880096435546875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003814697265625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_4>\n\n    def test_program_4(self):\n        \"non-elisione del cento\"\n        num      = 508\n        expected = 'cinquecentootto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'cinquecentootto'\nE   - diciannove\nE   + cinquecentootto\nE    : \twhen input=(508,) \nE   \t\t'diciannove' != 'cinquecentootto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00024509429931640625, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0012285709381103516, "run_index": 9, "setup": {"name": "setup", "duration": 0.0003006458282470703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003871917724609375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_5>\n\n    def test_program_5(self):\n        \"non-elisione del mille e del cento\"\n        num      = 1501\n        expected = 'millecinquecentouno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'millecinquecentouno'\nE   - diciannove\nE   + millecinquecentouno\nE    : \twhen input=(1501,) \nE   \t\t'diciannove' != 'millecinquecentouno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00024008750915527344, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0012009143829345703, "run_index": 10, "setup": {"name": "setup", "duration": 0.000293731689453125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00037932395935058594, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'diciassettemilaottantuno'\nE   - diciannove\nE   + diciassettemilaottantuno\nE    : \twhen input=(17081,) \nE   \t\t'diciannove' != 'diciassettemilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00023412704467773438, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0012116432189941406, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002887248992919922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00038504600524902344, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'novecentottantunomilioniottomilaottocentodiciotto'\nE   - diciannove\nE   + novecentottantunomilioniottomilaottocentodiciotto\nE    : \twhen input=(981008818,) \nE   \t\t'diciannove' != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002491474151611328, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0012059211730957031, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002944469451904297, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003914833068847656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - diciannove\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'diciannove' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00022554397583007812, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0015873908996582031, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002932548522949219, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003848075866699219, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciannove' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\nE   - diciannove\nE   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta\nE    : \twhen input=(808080808080,) \nE   \t\t'diciannove' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0006160736083984375, "outcome": "passed"}, "outcome": "failed"}], "summary": {"failed": 14, "num_tests": 14, "duration": 0.2268693447113037}, "created_at": "2018-08-01 09:19:10.461778"}}