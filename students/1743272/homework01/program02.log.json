{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0033478736877441406, "run_index": 0, "setup": {"name": "setup", "duration": 0.0014243125915527344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00029206275939941406, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002071857452392578, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001355886459350586, "run_index": 1, "setup": {"name": "setup", "duration": 0.0003921985626220703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003132820129394531, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: [] != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno' : \twhen input=(801081801081,) \nE   \t\t[] != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002582073211669922, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0011310577392578125, "run_index": 2, "setup": {"name": "setup", "duration": 0.0002949237823486328, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00032329559326171875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: [] != 'sessantottomiliardiduecentocinquantottom[39 chars]otto' : \twhen input=(68258148238,) \nE   \t\t[] != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00021791458129882812, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0010275840759277344, "run_index": 3, "setup": {"name": "setup", "duration": 0.0002713203430175781, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002789497375488281, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: [] != 'ottantunomiliardisettantunomilioninovantunomilaventuno' : \twhen input=(81071091021,) \nE   \t\t[] != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020599365234375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0010192394256591797, "run_index": 4, "setup": {"name": "setup", "duration": 0.00026917457580566406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002722740173339844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: [] != 'undicimiliardidodicimilionitredicimilaquattordici' : \twhen input=(11012013014,) \nE   \t\t[] != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002086162567138672, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0010292530059814453, "run_index": 5, "setup": {"name": "setup", "duration": 0.00026488304138183594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00029087066650390625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: [] != 'novantanovemiliardinovecentonovantanovem[46 chars]nove' : \twhen input=(99999999999,) \nE   \t\t[] != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002086162567138672, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0009684562683105469, "run_index": 6, "setup": {"name": "setup", "duration": 0.0002658367156982422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002429485321044922, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001938343048095703, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009343624114990234, "run_index": 7, "setup": {"name": "setup", "duration": 0.00025463104248046875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023794174194335938, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018715858459472656, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009343624114990234, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002570152282714844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023317337036132812, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018715858459472656, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009362697601318359, "run_index": 9, "setup": {"name": "setup", "duration": 0.00025653839111328125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023627281188964844, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.000186920166015625, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009446144104003906, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002601146697998047, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023794174194335938, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018644332885742188, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0015285015106201172, "run_index": 11, "setup": {"name": "setup", "duration": 0.00025463104248046875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0008146762847900391, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentoottantaunomilioniottocentodiciottomilaottocentootto' != 'novecentottantunomilioniottomilaottocentodiciotto'\nE   - novecentoottantaunomilioniottocentodiciottomilaottocentootto\nE   ?          -     -         -------------\nE   + novecentottantunomilioniottomilaottocentodiciotto\nE   ?                                          ++++\nE    : \twhen input=(981008818,) \nE   \t\t'novecentoottantaunomilioniottocentodiciottomilaottocentootto' != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020456314086914062, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0017871856689453125, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002617835998535156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0010602474212646484, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentoottantaottomilioniottocentoottantaottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - ottocentoottantaottomilioniottocentoottantaottomilaottocentoottantotto\nE   ?          -     -                    -     -                 -\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'ottocentoottantaottomilioniottocentoottantaottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002033710479736328, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0014188289642333984, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002617835998535156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026726722717285156, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: [] != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta' : \twhen input=(808080808080,) \nE   \t\t[] != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0006279945373535156, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 6, "failed": 8, "num_tests": 14, "duration": 0.16620445251464844}, "created_at": "2018-08-01 00:29:15.174397"}}