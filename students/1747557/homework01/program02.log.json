{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0036079883575439453, "run_index": 0, "setup": {"name": "setup", "duration": 0.0014874935150146484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028324127197265625, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003497600555419922, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0011768341064453125, "run_index": 1, "setup": {"name": "setup", "duration": 0.0002779960632324219, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000308990478515625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno' : \twhen input=(801081801081,) \nE   \t\tNone != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00031185150146484375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0012090206146240234, "run_index": 2, "setup": {"name": "setup", "duration": 0.00029969215393066406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003192424774169922, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'sessantottomiliardiduecentocinquantottom[39 chars]otto' : \twhen input=(68258148238,) \nE   \t\tNone != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002903938293457031, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0011181831359863281, "run_index": 3, "setup": {"name": "setup", "duration": 0.0002956390380859375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002989768981933594, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottantunomiliardisettantunomilioninovantunomilaventuno' : \twhen input=(81071091021,) \nE   \t\tNone != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00022792816162109375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.001199960708618164, "run_index": 4, "setup": {"name": "setup", "duration": 0.0003192424774169922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028967857360839844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'undicimiliardidodicimilionitredicimilaquattordici' : \twhen input=(11012013014,) \nE   \t\tNone != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027179718017578125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.001220703125, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002982616424560547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003516674041748047, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'novantanovemiliardinovecentonovantanovem[46 chars]nove' : \twhen input=(99999999999,) \nE   \t\tNone != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027251243591308594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0010650157928466797, "run_index": 6, "setup": {"name": "setup", "duration": 0.00029730796813964844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025916099548339844, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00021123886108398438, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009522438049316406, "run_index": 7, "setup": {"name": "setup", "duration": 0.00026345252990722656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023651123046875, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001888275146484375, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.00093841552734375, "run_index": 8, "setup": {"name": "setup", "duration": 0.00025963783264160156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023245811462402344, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018668174743652344, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009455680847167969, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002586841583251953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002415180206298828, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018668174743652344, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009393692016601562, "run_index": 10, "setup": {"name": "setup", "duration": 0.00025773048400878906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023794174194335938, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018596649169921875, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0014252662658691406, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002567768096923828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0006377696990966797, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentottantunomilionidiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\nE   - novecentottantunomilionidiciotto\nE   + novecentottantunomilioniottomilaottocentodiciotto\nE   ?                         +++++++++++++++++\nE    : \twhen input=(981008818,) \nE   \t\t'novecentottantunomilionidiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002739429473876953, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0013861656188964844, "run_index": 12, "setup": {"name": "setup", "duration": 0.00030159950256347656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005106925964355469, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentottantottomilioniottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - ottocentottantottomilioniottantotto\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'ottocentottantottomilioniottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002722740173339844, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0015594959259033203, "run_index": 13, "setup": {"name": "setup", "duration": 0.00030303001403808594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003063678741455078, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta' : \twhen input=(808080808080,) \nE   \t\tNone != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0006470680236816406, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 6, "failed": 8, "num_tests": 14, "duration": 0.26383042335510254}, "created_at": "2018-08-01 00:29:18.352061"}}