{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.003200531005859375, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013637542724609375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002694129943847656, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00020360946655273438, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0014028549194335938, "run_index": 1, "setup": {"name": "setup", "duration": 0.00036406517028808594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004687309265136719, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'unmilionemilleottant' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\nE   - unmilionemilleottant\nE   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno\nE    : \twhen input=(801081801081,) \nE   \t\t'unmilionemilleottant' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020599365234375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0011620521545410156, "run_index": 2, "setup": {"name": "setup", "duration": 0.00027370452880859375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00041222572326660156, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'centoquarantmiladuecentotrent' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'\nE   - centoquarantmiladuecentotrent\nE   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE    : \twhen input=(68258148238,) \nE   \t\t'centoquarantmiladuecentotrent' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020241737365722656, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0011341571807861328, "run_index": 3, "setup": {"name": "setup", "duration": 0.000263214111328125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00040459632873535156, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'unmilionenovantunmilavent' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\nE   - unmilionenovantunmilavent\nE   + ottantunomiliardisettantunomilioninovantunomilaventuno\nE    : \twhen input=(81071091021,) \nE   \t\t'unmilionenovantunmilavent' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020313262939453125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0010986328125, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002613067626953125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003726482391357422, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'quattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\nE   - quattordici\nE   + undicimiliardidodicimilionitredicimilaquattordici\nE    : \twhen input=(11012013014,) \nE   \t\t'quattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002033710479736328, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0011780261993408203, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002849102020263672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00040531158447265625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'\nE   - novecentonovantanove\nE   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE    : \twhen input=(99999999999,) \nE   \t\t'novecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002028942108154297, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0009465217590332031, "run_index": 6, "setup": {"name": "setup", "duration": 0.00026226043701171875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002334117889404297, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018858909606933594, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0011224746704101562, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002560615539550781, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000408172607421875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_3>\n\n    def test_program_3(self):\n        \"non-elisione del cento e elisione del venti-otto\"\n        num      = 128\n        expected = 'centoventotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'centovent' != 'centoventotto'\nE   - centovent\nE   + centoventotto\nE   ?          ++++\nE    : \twhen input=(128,) \nE   \t\t'centovent' != 'centoventotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.000202178955078125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009455680847167969, "run_index": 8, "setup": {"name": "setup", "duration": 0.00026154518127441406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023412704467773438, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018835067749023438, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009305477142333984, "run_index": 9, "setup": {"name": "setup", "duration": 0.000255584716796875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022935867309570312, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001900196075439453, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0010612010955810547, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002536773681640625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00035262107849121094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottant' != 'diciassettemilaottantuno'\nE   - ottant\nE   + diciassettemilaottantuno\nE    : \twhen input=(17081,) \nE   \t\t'ottant' != 'diciassettemilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020122528076171875, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0010986328125, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002658367156982422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003657341003417969, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'unmilioneottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\nE   - unmilioneottocentodiciotto\nE   + novecentottantunomilioniottomilaottocentodiciotto\nE    : \twhen input=(981008818,) \nE   \t\t'unmilioneottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020122528076171875, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0011119842529296875, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002663135528564453, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00037789344787597656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottottantmilaottocentottant' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - ottottantmilaottocentottant\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'ottottantmilaottocentottant' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002014636993408203, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0014450550079345703, "run_index": 13, "setup": {"name": "setup", "duration": 0.00026226043701171875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003745555877685547, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\nE   - ottanta\nE   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta\nE    : \twhen input=(808080808080,) \nE   \t\t'ottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0005459785461425781, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 4, "failed": 10, "num_tests": 14, "duration": 0.30045008659362793}, "created_at": "2018-08-01 00:30:22.091004"}}