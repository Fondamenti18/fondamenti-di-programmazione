============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /home/travis/virtualenv/python3.6.3/bin/python
cachedir: .pytest_cache
rootdir: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1804884/homework01, inifile:
plugins: timeout-1.3.1, json-0.4.0
timeout: 10.0s
timeout method: signal
timeout func_only: False
collecting ... collected 14 items

grade02.py::Test::test_program_1 FAILED                                  [  7%]
grade02.py::Test::test_program_10 FAILED                                 [ 14%]
grade02.py::Test::test_program_11 FAILED                                 [ 21%]
grade02.py::Test::test_program_12 FAILED                                 [ 28%]
grade02.py::Test::test_program_13 FAILED                                 [ 35%]
grade02.py::Test::test_program_14 FAILED                                 [ 42%]
grade02.py::Test::test_program_2 FAILED                                  [ 50%]
grade02.py::Test::test_program_3 FAILED                                  [ 57%]
grade02.py::Test::test_program_4 FAILED                                  [ 64%]
grade02.py::Test::test_program_5 FAILED                                  [ 71%]
grade02.py::Test::test_program_6 FAILED                                  [ 78%]
grade02.py::Test::test_program_7 FAILED                                  [ 85%]
grade02.py::Test::test_program_8 FAILED                                  [ 92%]
grade02.py::Test::test_program_9 FAILED                                  [100%]

=================================== FAILURES ===================================
_____________________________ Test.test_program_1 ______________________________

self = <grade02.Test testMethod=test_program_1>

    def test_program_1(self):
        "numero semplice senza elisioni"
        num      = 3
        expected = 'tre'
>       return self.dotest02(num, expected)

grade02.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: '' != 'tre'
E   + tre : 	when input=(3,) 
E   		'' != 'tre'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 3]]
_____________________________ Test.test_program_10 _____________________________

self = <grade02.Test testMethod=test_program_10>

    def test_program_10(self):
        'non elisioni 800-1 e elisioni 80-1'
        num      = 801081801081
        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentoottocento' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
E   - ottocentoottocento
E   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno
E    : 	when input=(801081801081,) 
E   		'ottocentoottocento' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[8, 0, 1], [0, 8, 1], [8, 0, 1], [0, 8, 1]]
_____________________________ Test.test_program_11 _____________________________

self = <grade02.Test testMethod=test_program_11>

    def test_program_11(self):
        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'
        num      = 68258148238
        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'
>       return self.dotest02(num, expected)

grade02.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'duecentocentoduecento' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'
E   - duecentocentoduecento
E   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto
E    : 	when input=(68258148238,) 
E   		'duecentocentoduecento' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 6, 8], [2, 5, 8], [1, 4, 8], [2, 3, 8]]
_____________________________ Test.test_program_12 _____________________________

self = <grade02.Test testMethod=test_program_12>

    def test_program_12(self):
        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'
        num      = 81071091021
        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'
>       return self.dotest02(num, expected)

grade02.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: '' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'
E   + ottantunomiliardisettantunomilioninovantunomilaventuno : 	when input=(81071091021,) 
E   		'' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 8, 1], [0, 7, 1], [0, 9, 1], [0, 2, 1]]
_____________________________ Test.test_program_13 _____________________________

self = <grade02.Test testMethod=test_program_13>

    def test_program_13(self):
        'numeri speciali tra 10 e 20'
        num      = 11012013014
        expected = 'undicimiliardidodicimilionitredicimilaquattordici'
>       return self.dotest02(num, expected)

grade02.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 11012013014

    def conv(n):
        numero=""
        lista20=["","uno","due","tre","quattro","cique","sei","sette","otto","nove","dieci","undici","dodici","tredici","quattordici","quindici","sedici","diciassette","diciotto","diciannove","venti"]
        listadec=["","","venti","trenta","quaranta"," cinquanta","sessanata","ottanta","novanta"]
        listacent=["", "cento","duecento","trecento","quattrocento","cinquecento","seicento","settecento","ottocento","novecento"]
        cmr=n//100000000000
        dmr=n% 100000000000
        mr=n%  10000000000
        cml=mr%1000000000
        dml=cml%100000000
        ml=dml%10000000
        cm=ml%1000000
        dm=cm%100000
        m=dm%10000
        c=m%1000
        d=c%100
        u=d%10
        dmr=dmr//10000000000
        mr=mr//1000000000
        cml=cml//100000000
        dml=dml//10000000
        ml=ml//1000000
        cm=cm//100000
        dm=dm//10000
        m=m//1000
        c=c//100
        d=d//10
        listamr=[cmr,dmr,mr]
        listaml=[cml,dml,ml]
        listam=[cm,dm,m]
        listau=[c,d,u]
        listanum=[listamr,listaml,listam,listau]
        print(listanum)
        listamila=['miliardi','milioni','mila','','']
        listamille=['unmiliardo','unmilione','mille','','']
        c=0
        for i in listanum:
            numero+=listacent[i[0]]
            '''se la cifra delle deci'''
            if i[1]==1:
                i[2]=i[1]*10+i[2]
                '''    '''
                if i[1]==8:
                    if i[0]>=1:
                        numero=numero[:-1]
                        numero+=listadec[8]
                    else:
                        numero+=listadec[i[1]]
                else :
                    numero+=listadec[i[1]]
                    '''   '''
                if i[0]*100+i[1]*10+i[2]>1:
                    numero+=listamila[c]
                    ''' '''
                if i[0]==0 and i[1]==0 and i[2]==1:
                    numero=listamille[c]
                c+=1
>               if c==f:
E               NameError: name 'f' is not defined

program02.py:91: NameError
----------------------------- Captured stdout call -----------------------------
[[0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4]]
_____________________________ Test.test_program_14 _____________________________

self = <grade02.Test testMethod=test_program_14>

    def test_program_14(self):
        'numero massimo da convertire'
        num      = 99999999999
        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'
>       return self.dotest02(num, expected)

grade02.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'novecentonovecentonovecento' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'
E   - novecentonovecentonovecento
E   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove
E    : 	when input=(99999999999,) 
E   		'novecentonovecentonovecento' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 9, 9], [9, 9, 9], [9, 9, 9], [9, 9, 9]]
_____________________________ Test.test_program_2 ______________________________

self = <grade02.Test testMethod=test_program_2>

    def test_program_2(self):
        "numero speciale tra 10 e 20"
        num      = 17
        expected = 'diciassette'
>       return self.dotest02(num, expected)

grade02.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 17

    def conv(n):
        numero=""
        lista20=["","uno","due","tre","quattro","cique","sei","sette","otto","nove","dieci","undici","dodici","tredici","quattordici","quindici","sedici","diciassette","diciotto","diciannove","venti"]
        listadec=["","","venti","trenta","quaranta"," cinquanta","sessanata","ottanta","novanta"]
        listacent=["", "cento","duecento","trecento","quattrocento","cinquecento","seicento","settecento","ottocento","novecento"]
        cmr=n//100000000000
        dmr=n% 100000000000
        mr=n%  10000000000
        cml=mr%1000000000
        dml=cml%100000000
        ml=dml%10000000
        cm=ml%1000000
        dm=cm%100000
        m=dm%10000
        c=m%1000
        d=c%100
        u=d%10
        dmr=dmr//10000000000
        mr=mr//1000000000
        cml=cml//100000000
        dml=dml//10000000
        ml=ml//1000000
        cm=cm//100000
        dm=dm//10000
        m=m//1000
        c=c//100
        d=d//10
        listamr=[cmr,dmr,mr]
        listaml=[cml,dml,ml]
        listam=[cm,dm,m]
        listau=[c,d,u]
        listanum=[listamr,listaml,listam,listau]
        print(listanum)
        listamila=['miliardi','milioni','mila','','']
        listamille=['unmiliardo','unmilione','mille','','']
        c=0
        for i in listanum:
            numero+=listacent[i[0]]
            '''se la cifra delle deci'''
            if i[1]==1:
                i[2]=i[1]*10+i[2]
                '''    '''
                if i[1]==8:
                    if i[0]>=1:
                        numero=numero[:-1]
                        numero+=listadec[8]
                    else:
                        numero+=listadec[i[1]]
                else :
                    numero+=listadec[i[1]]
                    '''   '''
                if i[0]*100+i[1]*10+i[2]>1:
                    numero+=listamila[c]
                    ''' '''
                if i[0]==0 and i[1]==0 and i[2]==1:
                    numero=listamille[c]
                c+=1
>               if c==f:
E               NameError: name 'f' is not defined

program02.py:91: NameError
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 1, 7]]
_____________________________ Test.test_program_3 ______________________________

self = <grade02.Test testMethod=test_program_3>

    def test_program_3(self):
        "non-elisione del cento e elisione del venti-otto"
        num      = 128
        expected = 'centoventotto'
>       return self.dotest02(num, expected)

grade02.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'cento' != 'centoventotto'
E   - cento
E   + centoventotto
E    : 	when input=(128,) 
E   		'cento' != 'centoventotto'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 2, 8]]
_____________________________ Test.test_program_4 ______________________________

self = <grade02.Test testMethod=test_program_4>

    def test_program_4(self):
        "non-elisione del cento"
        num      = 508
        expected = 'cinquecentootto'
>       return self.dotest02(num, expected)

grade02.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'cinquecento' != 'cinquecentootto'
E   - cinquecento
E   + cinquecentootto
E   ?            ++++
E    : 	when input=(508,) 
E   		'cinquecento' != 'cinquecentootto'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [5, 0, 8]]
_____________________________ Test.test_program_5 ______________________________

self = <grade02.Test testMethod=test_program_5>

    def test_program_5(self):
        "non-elisione del mille e del cento"
        num      = 1501
        expected = 'millecinquecentouno'
>       return self.dotest02(num, expected)

grade02.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'cinquecento' != 'millecinquecentouno'
E   - cinquecento
E   + millecinquecentouno
E   ? +++++           +++
E    : 	when input=(1501,) 
E   		'cinquecento' != 'millecinquecentouno'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [0, 0, 0], [0, 0, 1], [5, 0, 1]]
_____________________________ Test.test_program_6 ______________________________

self = <grade02.Test testMethod=test_program_6>

    def test_program_6(self):
        "non-elisione del mille e elisione di 80"
        num      = 17081
        expected = 'diciassettemilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 17081

    def conv(n):
        numero=""
        lista20=["","uno","due","tre","quattro","cique","sei","sette","otto","nove","dieci","undici","dodici","tredici","quattordici","quindici","sedici","diciassette","diciotto","diciannove","venti"]
        listadec=["","","venti","trenta","quaranta"," cinquanta","sessanata","ottanta","novanta"]
        listacent=["", "cento","duecento","trecento","quattrocento","cinquecento","seicento","settecento","ottocento","novecento"]
        cmr=n//100000000000
        dmr=n% 100000000000
        mr=n%  10000000000
        cml=mr%1000000000
        dml=cml%100000000
        ml=dml%10000000
        cm=ml%1000000
        dm=cm%100000
        m=dm%10000
        c=m%1000
        d=c%100
        u=d%10
        dmr=dmr//10000000000
        mr=mr//1000000000
        cml=cml//100000000
        dml=dml//10000000
        ml=ml//1000000
        cm=cm//100000
        dm=dm//10000
        m=m//1000
        c=c//100
        d=d//10
        listamr=[cmr,dmr,mr]
        listaml=[cml,dml,ml]
        listam=[cm,dm,m]
        listau=[c,d,u]
        listanum=[listamr,listaml,listam,listau]
        print(listanum)
        listamila=['miliardi','milioni','mila','','']
        listamille=['unmiliardo','unmilione','mille','','']
        c=0
        for i in listanum:
            numero+=listacent[i[0]]
            '''se la cifra delle deci'''
            if i[1]==1:
                i[2]=i[1]*10+i[2]
                '''    '''
                if i[1]==8:
                    if i[0]>=1:
                        numero=numero[:-1]
                        numero+=listadec[8]
                    else:
                        numero+=listadec[i[1]]
                else :
                    numero+=listadec[i[1]]
                    '''   '''
                if i[0]*100+i[1]*10+i[2]>1:
                    numero+=listamila[c]
                    ''' '''
                if i[0]==0 and i[1]==0 and i[2]==1:
                    numero=listamille[c]
                c+=1
>               if c==f:
E               NameError: name 'f' is not defined

program02.py:91: NameError
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [0, 0, 0], [0, 1, 7], [0, 8, 1]]
_____________________________ Test.test_program_7 ______________________________

self = <grade02.Test testMethod=test_program_7>

    def test_program_7(self):
        "numero grande con molte elisioni e non-elisioni"
        num      = 981008818
        expected = 'novecentottantunomilioniottomilaottocentodiciotto'
>       return self.dotest02(num, expected)

grade02.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 981008818

    def conv(n):
        numero=""
        lista20=["","uno","due","tre","quattro","cique","sei","sette","otto","nove","dieci","undici","dodici","tredici","quattordici","quindici","sedici","diciassette","diciotto","diciannove","venti"]
        listadec=["","","venti","trenta","quaranta"," cinquanta","sessanata","ottanta","novanta"]
        listacent=["", "cento","duecento","trecento","quattrocento","cinquecento","seicento","settecento","ottocento","novecento"]
        cmr=n//100000000000
        dmr=n% 100000000000
        mr=n%  10000000000
        cml=mr%1000000000
        dml=cml%100000000
        ml=dml%10000000
        cm=ml%1000000
        dm=cm%100000
        m=dm%10000
        c=m%1000
        d=c%100
        u=d%10
        dmr=dmr//10000000000
        mr=mr//1000000000
        cml=cml//100000000
        dml=dml//10000000
        ml=ml//1000000
        cm=cm//100000
        dm=dm//10000
        m=m//1000
        c=c//100
        d=d//10
        listamr=[cmr,dmr,mr]
        listaml=[cml,dml,ml]
        listam=[cm,dm,m]
        listau=[c,d,u]
        listanum=[listamr,listaml,listam,listau]
        print(listanum)
        listamila=['miliardi','milioni','mila','','']
        listamille=['unmiliardo','unmilione','mille','','']
        c=0
        for i in listanum:
            numero+=listacent[i[0]]
            '''se la cifra delle deci'''
            if i[1]==1:
                i[2]=i[1]*10+i[2]
                '''    '''
                if i[1]==8:
                    if i[0]>=1:
                        numero=numero[:-1]
                        numero+=listadec[8]
                    else:
                        numero+=listadec[i[1]]
                else :
                    numero+=listadec[i[1]]
                    '''   '''
                if i[0]*100+i[1]*10+i[2]>1:
                    numero+=listamila[c]
                    ''' '''
                if i[0]==0 and i[1]==0 and i[2]==1:
                    numero=listamille[c]
                c+=1
>               if c==f:
E               NameError: name 'f' is not defined

program02.py:91: NameError
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [9, 8, 1], [0, 0, 8], [8, 1, 8]]
_____________________________ Test.test_program_8 ______________________________

self = <grade02.Test testMethod=test_program_8>

    def test_program_8(self):
        "elisioni 800-80 e 80-8"
        num      = 888888888
        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
>       return self.dotest02(num, expected)

grade02.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentoottocentoottocento' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
E   - ottocentoottocentoottocento
E   + ottocentottantottomilioniottocentottantottomilaottocentottantotto
E    : 	when input=(888888888,) 
E   		'ottocentoottocentoottocento' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[0, 0, 0], [8, 8, 8], [8, 8, 8], [8, 8, 8]]
_____________________________ Test.test_program_9 ______________________________

self = <grade02.Test testMethod=test_program_9>

    def test_program_9(self):
        'non elisioni 800-8 e elisioni 800-80'
        num      = 808080808080
        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
>       return self.dotest02(num, expected)

grade02.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentoottocento' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
E   - ottocentoottocento
E   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta
E    : 	when input=(808080808080,) 
E   		'ottocentoottocento' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'	<- correct return value
----------------------------- Captured stdout call -----------------------------
[[8, 0, 8], [0, 8, 0], [8, 0, 8], [0, 8, 0]]
 generated json report: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1804884/homework01/program02.log.json 
========================== 14 failed in 0.24 seconds ===========================
