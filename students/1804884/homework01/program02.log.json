{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0036356449127197266, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013720989227294922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0006105899810791016, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_1>\n\n    def test_program_1(self):\n        \"numero semplice senza elisioni\"\n        num      = 3\n        expected = 'tre'\n>       return self.dotest02(num, expected)\n\ngrade02.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: '' != 'tre'\nE   + tre : \twhen input=(3,) \nE   \t\t'' != 'tre'\t<- correct return value", "stdout": "[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 3]]\n"}, "teardown": {"name": "teardown", "duration": 0.0002808570861816406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001417398452758789, "run_index": 1, "setup": {"name": "setup", "duration": 0.00031065940856933594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005459785461425781, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentoottocento' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\nE   - ottocentoottocento\nE   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno\nE    : \twhen input=(801081801081,) \nE   \t\t'ottocentoottocento' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value", "stdout": "[[8, 0, 1], [0, 8, 1], [8, 0, 1], [0, 8, 1]]\n"}, "teardown": {"name": "teardown", "duration": 0.00025010108947753906, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0013399124145507812, "run_index": 2, "setup": {"name": "setup", "duration": 0.00028896331787109375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005233287811279297, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'duecentocentoduecento' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'\nE   - duecentocentoduecento\nE   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE    : \twhen input=(68258148238,) \nE   \t\t'duecentocentoduecento' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value", "stdout": "[[0, 6, 8], [2, 5, 8], [1, 4, 8], [2, 3, 8]]\n"}, "teardown": {"name": "teardown", "duration": 0.00023865699768066406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0012249946594238281, "run_index": 3, "setup": {"name": "setup", "duration": 0.00028705596923828125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00039577484130859375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: '' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\nE   + ottantunomiliardisettantunomilioninovantunomilaventuno : \twhen input=(81071091021,) \nE   \t\t'' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value", "stdout": "[[0, 8, 1], [0, 7, 1], [0, 9, 1], [0, 2, 1]]\n"}, "teardown": {"name": "teardown", "duration": 0.0002551078796386719, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.001201629638671875, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002961158752441406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00032901763916015625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 11012013014\n\n    def conv(n):\n        numero=\"\"\n        lista20=[\"\",\"uno\",\"due\",\"tre\",\"quattro\",\"cique\",\"sei\",\"sette\",\"otto\",\"nove\",\"dieci\",\"undici\",\"dodici\",\"tredici\",\"quattordici\",\"quindici\",\"sedici\",\"diciassette\",\"diciotto\",\"diciannove\",\"venti\"]\n        listadec=[\"\",\"\",\"venti\",\"trenta\",\"quaranta\",\" cinquanta\",\"sessanata\",\"ottanta\",\"novanta\"]\n        listacent=[\"\", \"cento\",\"duecento\",\"trecento\",\"quattrocento\",\"cinquecento\",\"seicento\",\"settecento\",\"ottocento\",\"novecento\"]\n        cmr=n//100000000000\n        dmr=n% 100000000000\n        mr=n%  10000000000\n        cml=mr%1000000000\n        dml=cml%100000000\n        ml=dml%10000000\n        cm=ml%1000000\n        dm=cm%100000\n        m=dm%10000\n        c=m%1000\n        d=c%100\n        u=d%10\n        dmr=dmr//10000000000\n        mr=mr//1000000000\n        cml=cml//100000000\n        dml=dml//10000000\n        ml=ml//1000000\n        cm=cm//100000\n        dm=dm//10000\n        m=m//1000\n        c=c//100\n        d=d//10\n        listamr=[cmr,dmr,mr]\n        listaml=[cml,dml,ml]\n        listam=[cm,dm,m]\n        listau=[c,d,u]\n        listanum=[listamr,listaml,listam,listau]\n        print(listanum)\n        listamila=['miliardi','milioni','mila','','']\n        listamille=['unmiliardo','unmilione','mille','','']\n        c=0\n        for i in listanum:\n            numero+=listacent[i[0]]\n            '''se la cifra delle deci'''\n            if i[1]==1:\n                i[2]=i[1]*10+i[2]\n                '''    '''\n                if i[1]==8:\n                    if i[0]>=1:\n                        numero=numero[:-1]\n                        numero+=listadec[8]\n                    else:\n                        numero+=listadec[i[1]]\n                else :\n                    numero+=listadec[i[1]]\n                    '''   '''\n                if i[0]*100+i[1]*10+i[2]>1:\n                    numero+=listamila[c]\n                    ''' '''\n                if i[0]==0 and i[1]==0 and i[2]==1:\n                    numero=listamille[c]\n                c+=1\n>               if c==f:\nE               NameError: name 'f' is not defined\n\nprogram02.py:91: NameError", "stdout": "[[0, 1, 1], [0, 1, 2], [0, 1, 3], [0, 1, 4]]\n"}, "teardown": {"name": "teardown", "duration": 0.0002803802490234375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0014138221740722656, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002906322479248047, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005774497985839844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentonovecentonovecento' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'\nE   - novecentonovecentonovecento\nE   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE    : \twhen input=(99999999999,) \nE   \t\t'novecentonovecentonovecento' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value", "stdout": "[[0, 9, 9], [9, 9, 9], [9, 9, 9], [9, 9, 9]]\n"}, "teardown": {"name": "teardown", "duration": 0.0002551078796386719, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0011699199676513672, "run_index": 6, "setup": {"name": "setup", "duration": 0.00029778480529785156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00032401084899902344, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_2>\n\n    def test_program_2(self):\n        \"numero speciale tra 10 e 20\"\n        num      = 17\n        expected = 'diciassette'\n>       return self.dotest02(num, expected)\n\ngrade02.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 17\n\n    def conv(n):\n        numero=\"\"\n        lista20=[\"\",\"uno\",\"due\",\"tre\",\"quattro\",\"cique\",\"sei\",\"sette\",\"otto\",\"nove\",\"dieci\",\"undici\",\"dodici\",\"tredici\",\"quattordici\",\"quindici\",\"sedici\",\"diciassette\",\"diciotto\",\"diciannove\",\"venti\"]\n        listadec=[\"\",\"\",\"venti\",\"trenta\",\"quaranta\",\" cinquanta\",\"sessanata\",\"ottanta\",\"novanta\"]\n        listacent=[\"\", \"cento\",\"duecento\",\"trecento\",\"quattrocento\",\"cinquecento\",\"seicento\",\"settecento\",\"ottocento\",\"novecento\"]\n        cmr=n//100000000000\n        dmr=n% 100000000000\n        mr=n%  10000000000\n        cml=mr%1000000000\n        dml=cml%100000000\n        ml=dml%10000000\n        cm=ml%1000000\n        dm=cm%100000\n        m=dm%10000\n        c=m%1000\n        d=c%100\n        u=d%10\n        dmr=dmr//10000000000\n        mr=mr//1000000000\n        cml=cml//100000000\n        dml=dml//10000000\n        ml=ml//1000000\n        cm=cm//100000\n        dm=dm//10000\n        m=m//1000\n        c=c//100\n        d=d//10\n        listamr=[cmr,dmr,mr]\n        listaml=[cml,dml,ml]\n        listam=[cm,dm,m]\n        listau=[c,d,u]\n        listanum=[listamr,listaml,listam,listau]\n        print(listanum)\n        listamila=['miliardi','milioni','mila','','']\n        listamille=['unmiliardo','unmilione','mille','','']\n        c=0\n        for i in listanum:\n            numero+=listacent[i[0]]\n            '''se la cifra delle deci'''\n            if i[1]==1:\n                i[2]=i[1]*10+i[2]\n                '''    '''\n                if i[1]==8:\n                    if i[0]>=1:\n                        numero=numero[:-1]\n                        numero+=listadec[8]\n                    else:\n                        numero+=listadec[i[1]]\n                else :\n                    numero+=listadec[i[1]]\n                    '''   '''\n                if i[0]*100+i[1]*10+i[2]>1:\n                    numero+=listamila[c]\n                    ''' '''\n                if i[0]==0 and i[1]==0 and i[2]==1:\n                    numero=listamille[c]\n                c+=1\n>               if c==f:\nE               NameError: name 'f' is not defined\n\nprogram02.py:91: NameError", "stdout": "[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 1, 7]]\n"}, "teardown": {"name": "teardown", "duration": 0.0002503395080566406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.001279592514038086, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002944469451904297, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000438690185546875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_3>\n\n    def test_program_3(self):\n        \"non-elisione del cento e elisione del venti-otto\"\n        num      = 128\n        expected = 'centoventotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'cento' != 'centoventotto'\nE   - cento\nE   + centoventotto\nE    : \twhen input=(128,) \nE   \t\t'cento' != 'centoventotto'\t<- correct return value", "stdout": "[[0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 2, 8]]\n"}, "teardown": {"name": "teardown", "duration": 0.00025200843811035156, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0013911724090576172, "run_index": 8, "setup": {"name": "setup", "duration": 0.0003142356872558594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005140304565429688, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_4>\n\n    def test_program_4(self):\n        \"non-elisione del cento\"\n        num      = 508\n        expected = 'cinquecentootto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'cinquecento' != 'cinquecentootto'\nE   - cinquecento\nE   + cinquecentootto\nE   ?            ++++\nE    : \twhen input=(508,) \nE   \t\t'cinquecento' != 'cinquecentootto'\t<- correct return value", "stdout": "[[0, 0, 0], [0, 0, 0], [0, 0, 0], [5, 0, 8]]\n"}, "teardown": {"name": "teardown", "duration": 0.0002486705780029297, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0013508796691894531, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002925395965576172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005061626434326172, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_5>\n\n    def test_program_5(self):\n        \"non-elisione del mille e del cento\"\n        num      = 1501\n        expected = 'millecinquecentouno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'cinquecento' != 'millecinquecentouno'\nE   - cinquecento\nE   + millecinquecentouno\nE   ? +++++           +++\nE    : \twhen input=(1501,) \nE   \t\t'cinquecento' != 'millecinquecentouno'\t<- correct return value", "stdout": "[[0, 0, 0], [0, 0, 0], [0, 0, 1], [5, 0, 1]]\n"}, "teardown": {"name": "teardown", "duration": 0.00025963783264160156, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.001161813735961914, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002970695495605469, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003273487091064453, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 17081\n\n    def conv(n):\n        numero=\"\"\n        lista20=[\"\",\"uno\",\"due\",\"tre\",\"quattro\",\"cique\",\"sei\",\"sette\",\"otto\",\"nove\",\"dieci\",\"undici\",\"dodici\",\"tredici\",\"quattordici\",\"quindici\",\"sedici\",\"diciassette\",\"diciotto\",\"diciannove\",\"venti\"]\n        listadec=[\"\",\"\",\"venti\",\"trenta\",\"quaranta\",\" cinquanta\",\"sessanata\",\"ottanta\",\"novanta\"]\n        listacent=[\"\", \"cento\",\"duecento\",\"trecento\",\"quattrocento\",\"cinquecento\",\"seicento\",\"settecento\",\"ottocento\",\"novecento\"]\n        cmr=n//100000000000\n        dmr=n% 100000000000\n        mr=n%  10000000000\n        cml=mr%1000000000\n        dml=cml%100000000\n        ml=dml%10000000\n        cm=ml%1000000\n        dm=cm%100000\n        m=dm%10000\n        c=m%1000\n        d=c%100\n        u=d%10\n        dmr=dmr//10000000000\n        mr=mr//1000000000\n        cml=cml//100000000\n        dml=dml//10000000\n        ml=ml//1000000\n        cm=cm//100000\n        dm=dm//10000\n        m=m//1000\n        c=c//100\n        d=d//10\n        listamr=[cmr,dmr,mr]\n        listaml=[cml,dml,ml]\n        listam=[cm,dm,m]\n        listau=[c,d,u]\n        listanum=[listamr,listaml,listam,listau]\n        print(listanum)\n        listamila=['miliardi','milioni','mila','','']\n        listamille=['unmiliardo','unmilione','mille','','']\n        c=0\n        for i in listanum:\n            numero+=listacent[i[0]]\n            '''se la cifra delle deci'''\n            if i[1]==1:\n                i[2]=i[1]*10+i[2]\n                '''    '''\n                if i[1]==8:\n                    if i[0]>=1:\n                        numero=numero[:-1]\n                        numero+=listadec[8]\n                    else:\n                        numero+=listadec[i[1]]\n                else :\n                    numero+=listadec[i[1]]\n                    '''   '''\n                if i[0]*100+i[1]*10+i[2]>1:\n                    numero+=listamila[c]\n                    ''' '''\n                if i[0]==0 and i[1]==0 and i[2]==1:\n                    numero=listamille[c]\n                c+=1\n>               if c==f:\nE               NameError: name 'f' is not defined\n\nprogram02.py:91: NameError", "stdout": "[[0, 0, 0], [0, 0, 0], [0, 1, 7], [0, 8, 1]]\n"}, "teardown": {"name": "teardown", "duration": 0.000240325927734375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0011665821075439453, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002868175506591797, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003135204315185547, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 981008818\n\n    def conv(n):\n        numero=\"\"\n        lista20=[\"\",\"uno\",\"due\",\"tre\",\"quattro\",\"cique\",\"sei\",\"sette\",\"otto\",\"nove\",\"dieci\",\"undici\",\"dodici\",\"tredici\",\"quattordici\",\"quindici\",\"sedici\",\"diciassette\",\"diciotto\",\"diciannove\",\"venti\"]\n        listadec=[\"\",\"\",\"venti\",\"trenta\",\"quaranta\",\" cinquanta\",\"sessanata\",\"ottanta\",\"novanta\"]\n        listacent=[\"\", \"cento\",\"duecento\",\"trecento\",\"quattrocento\",\"cinquecento\",\"seicento\",\"settecento\",\"ottocento\",\"novecento\"]\n        cmr=n//100000000000\n        dmr=n% 100000000000\n        mr=n%  10000000000\n        cml=mr%1000000000\n        dml=cml%100000000\n        ml=dml%10000000\n        cm=ml%1000000\n        dm=cm%100000\n        m=dm%10000\n        c=m%1000\n        d=c%100\n        u=d%10\n        dmr=dmr//10000000000\n        mr=mr//1000000000\n        cml=cml//100000000\n        dml=dml//10000000\n        ml=ml//1000000\n        cm=cm//100000\n        dm=dm//10000\n        m=m//1000\n        c=c//100\n        d=d//10\n        listamr=[cmr,dmr,mr]\n        listaml=[cml,dml,ml]\n        listam=[cm,dm,m]\n        listau=[c,d,u]\n        listanum=[listamr,listaml,listam,listau]\n        print(listanum)\n        listamila=['miliardi','milioni','mila','','']\n        listamille=['unmiliardo','unmilione','mille','','']\n        c=0\n        for i in listanum:\n            numero+=listacent[i[0]]\n            '''se la cifra delle deci'''\n            if i[1]==1:\n                i[2]=i[1]*10+i[2]\n                '''    '''\n                if i[1]==8:\n                    if i[0]>=1:\n                        numero=numero[:-1]\n                        numero+=listadec[8]\n                    else:\n                        numero+=listadec[i[1]]\n                else :\n                    numero+=listadec[i[1]]\n                    '''   '''\n                if i[0]*100+i[1]*10+i[2]>1:\n                    numero+=listamila[c]\n                    ''' '''\n                if i[0]==0 and i[1]==0 and i[2]==1:\n                    numero=listamille[c]\n                c+=1\n>               if c==f:\nE               NameError: name 'f' is not defined\n\nprogram02.py:91: NameError", "stdout": "[[0, 0, 0], [9, 8, 1], [0, 0, 8], [8, 1, 8]]\n"}, "teardown": {"name": "teardown", "duration": 0.00027942657470703125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0013370513916015625, "run_index": 12, "setup": {"name": "setup", "duration": 0.00029921531677246094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004744529724121094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentoottocentoottocento' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - ottocentoottocentoottocento\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE    : \twhen input=(888888888,) \nE   \t\t'ottocentoottocentoottocento' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value", "stdout": "[[0, 0, 0], [8, 8, 8], [8, 8, 8], [8, 8, 8]]\n"}, "teardown": {"name": "teardown", "duration": 0.00026416778564453125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0016765594482421875, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002994537353515625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00046443939208984375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentoottocento' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\nE   - ottocentoottocento\nE   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta\nE    : \twhen input=(808080808080,) \nE   \t\t'ottocentoottocento' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value", "stdout": "[[8, 0, 8], [0, 8, 0], [8, 0, 8], [0, 8, 0]]\n"}, "teardown": {"name": "teardown", "duration": 0.0006132125854492188, "outcome": "passed"}, "outcome": "failed"}], "summary": {"failed": 14, "num_tests": 14, "duration": 0.23224949836730957}, "created_at": "2018-08-01 09:19:08.870887"}}