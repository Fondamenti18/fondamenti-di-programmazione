============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /home/travis/virtualenv/python3.6.3/bin/python
cachedir: .pytest_cache
rootdir: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1462300/homework01, inifile:
plugins: timeout-1.3.1, json-0.4.0
timeout: 10.0s
timeout method: signal
timeout func_only: False
collecting ... collected 14 items

grade02.py::Test::test_program_1 PASSED                                  [  7%]
grade02.py::Test::test_program_10 FAILED                                 [ 14%]
grade02.py::Test::test_program_11 PASSED                                 [ 21%]
grade02.py::Test::test_program_12 FAILED                                 [ 28%]
grade02.py::Test::test_program_13 FAILED                                 [ 35%]
grade02.py::Test::test_program_14 FAILED                                 [ 42%]
grade02.py::Test::test_program_2 PASSED                                  [ 50%]
grade02.py::Test::test_program_3 PASSED                                  [ 57%]
grade02.py::Test::test_program_4 PASSED                                  [ 64%]
grade02.py::Test::test_program_5 PASSED                                  [ 71%]
grade02.py::Test::test_program_6 PASSED                                  [ 78%]
grade02.py::Test::test_program_7 PASSED                                  [ 85%]
grade02.py::Test::test_program_8 PASSED                                  [ 92%]
grade02.py::Test::test_program_9 FAILED                                  [100%]

=================================== FAILURES ===================================
_____________________________ Test.test_program_10 _____________________________

self = <grade02.Test testMethod=test_program_10>

    def test_program_10(self):
        'non elisioni 800-1 e elisioni 80-1'
        num      = 801081801081
        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentounomiliardicentoottocentoottomilionicentottantacento[25 chars]otto' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
E   - ottocentounomiliardicentoottocentoottomilionicentottantacentoottantamilacentoottocentootto
E   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno
E    : 	when input=(801081801081,) 
E   		'ottocentounomiliardicentoottocentoottomilionicentottantacentoottantamilacentoottocentootto' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'	<- correct return value
_____________________________ Test.test_program_12 _____________________________

self = <grade02.Test testMethod=test_program_12>

    def test_program_12(self):
        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'
        num      = 81071091021
        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'
>       return self.dotest02(num, expected)

grade02.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottantunomiliardisettantunomilioninovantunomilaventunonovantunomilaventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'
E   - ottantunomiliardisettantunomilioninovantunomilaventunonovantunomilaventuno
E   ?                                                       --------------------
E   + ottantunomiliardisettantunomilioninovantunomilaventuno
E    : 	when input=(81071091021,) 
E   		'ottantunomiliardisettantunomilioninovantunomilaventunonovantunomilaventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'	<- correct return value
_____________________________ Test.test_program_13 _____________________________

self = <grade02.Test testMethod=test_program_13>

    def test_program_13(self):
        'numeri speciali tra 10 e 20'
        num      = 11012013014
        expected = 'undicimiliardidodicimilionitredicimilaquattordici'
>       return self.dotest02(num, expected)

grade02.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'undicimiliardidodicimilionitredicimilaquattordicitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'
E   - undicimiliardidodicimilionitredicimilaquattordicitredicimilaquattordici
E   ?                                                  ----------------------
E   + undicimiliardidodicimilionitredicimilaquattordici
E    : 	when input=(11012013014,) 
E   		'undicimiliardidodicimilionitredicimilaquattordicitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'	<- correct return value
_____________________________ Test.test_program_14 _____________________________

self = <grade02.Test testMethod=test_program_14>

    def test_program_14(self):
        'numero massimo da convertire'
        num      = 99999999999
        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'
>       return self.dotest02(num, expected)

grade02.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:72: in conv
    a = undicicifre(num,base)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '99999999999', base = {1: 'uno', 2: 'due', 3: 'tre', 4: 'quattro', ...}

    def undicicifre(n,base):
        nume = []
        if int(n) in base:
            undicicif = base[int(n)]
        if n[:] == '00000000000':
            undicicif = ''
        else:
>           nume += base[int(n[:2])] + 'miliardi' + novecifre(n[2:],base)
E           KeyError: 99

program02.py:244: KeyError
_____________________________ Test.test_program_9 ______________________________

self = <grade02.Test testMethod=test_program_9>

    def test_program_9(self):
        'non elisioni 800-8 e elisioni 800-80'
        num      = 808080808080
        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
>       return self.dotest02(num, expected)

grade02.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottocentoottomiliardiottocentoottomilioniottantamilaottocentootto' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
E   - ottocentoottomiliardiottocentoottomilioniottantamilaottocentootto
E   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta
E    : 	when input=(808080808080,) 
E   		'ottocentoottomiliardiottocentoottomilioniottantamilaottocentootto' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'	<- correct return value
 generated json report: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1462300/homework01/program02.log.json 
====================== 5 failed, 9 passed in 0.17 seconds ======================
