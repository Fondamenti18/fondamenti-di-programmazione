{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.003233671188354492, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013773441314697266, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00027108192443847656, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002079010009765625, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0028040409088134766, "run_index": 1, "setup": {"name": "setup", "duration": 0.0002601146697998047, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0018856525421142578, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentounomiliardicentoottocentoottomilionicentottantacento[25 chars]otto' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\nE   - ottocentounomiliardicentoottocentoottomilionicentottantacentoottantamilacentoottocentootto\nE   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno\nE    : \twhen input=(801081801081,) \nE   \t\t'ottocentounomiliardicentoottocentoottomilionicentottantacentoottantamilacentoottocentootto' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0003981590270996094, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0019583702087402344, "run_index": 2, "setup": {"name": "setup", "duration": 0.0005364418029785156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005047321319580078, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003807544708251953, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0025358200073242188, "run_index": 3, "setup": {"name": "setup", "duration": 0.0004425048828125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0013759136199951172, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottantunomiliardisettantunomilioninovantunomilaventunonovantunomilaventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\nE   - ottantunomiliardisettantunomilioninovantunomilaventunonovantunomilaventuno\nE   ?                                                       --------------------\nE   + ottantunomiliardisettantunomilioninovantunomilaventuno\nE    : \twhen input=(81071091021,) \nE   \t\t'ottantunomiliardisettantunomilioninovantunomilaventunonovantunomilaventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027489662170410156, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0017876625061035156, "run_index": 4, "setup": {"name": "setup", "duration": 0.00035381317138671875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0008115768432617188, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'undicimiliardidodicimilionitredicimilaquattordicitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\nE   - undicimiliardidodicimilionitredicimilaquattordicitredicimilaquattordici\nE   ?                                                  ----------------------\nE   + undicimiliardidodicimilionitredicimilaquattordici\nE    : \twhen input=(11012013014,) \nE   \t\t'undicimiliardidodicimilionitredicimilaquattordicitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002684593200683594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0011997222900390625, "run_index": 5, "setup": {"name": "setup", "duration": 0.00030684471130371094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003123283386230469, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:72: in conv\n    a = undicicifre(num,base)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '99999999999', base = {1: 'uno', 2: 'due', 3: 'tre', 4: 'quattro', ...}\n\n    def undicicifre(n,base):\n        nume = []\n        if int(n) in base:\n            undicicif = base[int(n)]\n        if n[:] == '00000000000':\n            undicicif = ''\n        else:\n>           nume += base[int(n[:2])] + 'miliardi' + novecifre(n[2:],base)\nE           KeyError: 99\n\nprogram02.py:244: KeyError"}, "teardown": {"name": "teardown", "duration": 0.00027370452880859375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0010423660278320312, "run_index": 6, "setup": {"name": "setup", "duration": 0.00029587745666503906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002579689025878906, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001926422119140625, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009469985961914062, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002574920654296875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024080276489257812, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019121170043945312, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009353160858154297, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002570152282714844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023627281188964844, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001850128173828125, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0011031627655029297, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002884864807128906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000244140625, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00028204917907714844, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0010061264038085938, "run_index": 10, "setup": {"name": "setup", "duration": 0.00028634071350097656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002467632293701172, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018668174743652344, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0009648799896240234, "run_index": 11, "setup": {"name": "setup", "duration": 0.000255584716796875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026297569274902344, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019073486328125, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0009610652923583984, "run_index": 12, "setup": {"name": "setup", "duration": 0.000255584716796875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002627372741699219, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018715858459472656, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0021038055419921875, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002574920654296875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0009317398071289062, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentoottomiliardiottocentoottomilioniottantamilaottocentootto' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\nE   - ottocentoottomiliardiottocentoottomilioniottantamilaottocentootto\nE   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta\nE    : \twhen input=(808080808080,) \nE   \t\t'ottocentoottomiliardiottocentoottomilioniottantamilaottocentootto' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0006570816040039062, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 9, "failed": 5, "num_tests": 14, "duration": 0.17201948165893555}, "created_at": "2018-08-01 00:28:55.493091"}}