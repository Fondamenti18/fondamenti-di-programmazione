============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /home/travis/virtualenv/python3.6.3/bin/python
cachedir: .pytest_cache
rootdir: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1762390/homework01, inifile:
plugins: timeout-1.3.1, json-0.4.0
timeout: 10.0s
timeout method: signal
timeout func_only: False
collecting ... collected 14 items

grade02.py::Test::test_program_1 PASSED                                  [  7%]
grade02.py::Test::test_program_10 FAILED                                 [ 14%]
grade02.py::Test::test_program_11 FAILED                                 [ 21%]
grade02.py::Test::test_program_12 FAILED                                 [ 28%]
grade02.py::Test::test_program_13 FAILED                                 [ 35%]
grade02.py::Test::test_program_14 FAILED                                 [ 42%]
grade02.py::Test::test_program_2 PASSED                                  [ 50%]
grade02.py::Test::test_program_3 PASSED                                  [ 57%]
grade02.py::Test::test_program_4 PASSED                                  [ 64%]
grade02.py::Test::test_program_5 PASSED                                  [ 71%]
grade02.py::Test::test_program_6 PASSED                                  [ 78%]
grade02.py::Test::test_program_7 PASSED                                  [ 85%]
grade02.py::Test::test_program_8 PASSED                                  [ 92%]
grade02.py::Test::test_program_9 FAILED                                  [100%]

=================================== FAILURES ===================================
_____________________________ Test.test_program_10 _____________________________

self = <grade02.Test testMethod=test_program_10>

    def test_program_10(self):
        'non elisioni 800-1 e elisioni 80-1'
        num      = 801081801081
        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:85: in conv
    return conv(int(n/10000000000))+ "miliardi" + conv(n%10000000000)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 80

    def conv(n):
        if n in range(1,10):
            return ("uno", "due", "tre", "quattro", "cinque",               # cambia il numero in input da cifra a lettere nel range
                    "sei", "sette", "otto", "nove")[n-1]                    # da 1 a 9.
    
    
        if n in range(10,20):                                               # torna il numero in input da cifra a lettere nel range
            return ("dieci", "undici", "dodici", "tredici"                  # da 10 a 19.
                    "quattordici", "quindici", "sedici",
                    "diciassette", "diciotto","dicianove")[n-11]
    
        if n in range(20,100):                                              # l'insieme k rappresenta la traduzione da cifre a lettere
            k = ("venti", "trenta", "quaranta",                              # di tutte le decine .
                         "cinquanta", "sessanta", "settanta",
                         "ottanta", "novanta")
            c = k[int(n/10)-2]                                              # cambio tutti i numeri da 20 a 99 in lettere specialmente
            b = n%10                                                        # tutti i numeri che eludono le finali, tutte le decine
            if b == 1 or b == 8:                                            # da 1 a 8, ad esempio 21 e 38.
                c = c[:-1]
>           return c + conv(n%10)
E           TypeError: must be str, not NoneType

program02.py:53: TypeError
_____________________________ Test.test_program_11 _____________________________

self = <grade02.Test testMethod=test_program_11>

    def test_program_11(self):
        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'
        num      = 68258148238
        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'
>       return self.dotest02(num, expected)

grade02.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'seimiliardiottomiliardiduecentocinquantotto[40 chars]otto' != 'sessantottomiliardiduecentocinquantottomili[36 chars]otto'
E   - seimiliardiottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto
E   ?   ^^^^^ ^^^
E   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto
E   ?   ^^ ^^
E    : 	when input=(68258148238,) 
E   		'seimiliardiottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'	<- correct return value
_____________________________ Test.test_program_12 _____________________________

self = <grade02.Test testMethod=test_program_12>

    def test_program_12(self):
        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'
        num      = 81071091021
        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'
>       return self.dotest02(num, expected)

grade02.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'ottomiliardiunmiliardouno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'
E   - ottomiliardiunmiliardouno
E   + ottantunomiliardisettantunomilioninovantunomilaventuno
E    : 	when input=(81071091021,) 
E   		'ottomiliardiunmiliardouno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'	<- correct return value
_____________________________ Test.test_program_13 _____________________________

self = <grade02.Test testMethod=test_program_13>

    def test_program_13(self):
        'numeri speciali tra 10 e 20'
        num      = 11012013014
        expected = 'undicimiliardidodicimilionitredicimilaquattordici'
>       return self.dotest02(num, expected)

grade02.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'unomiliardiunmiliardouno' != 'undicimiliardidodicimilionitredicimilaquattordici'
E   - unomiliardiunmiliardouno
E   + undicimiliardidodicimilionitredicimilaquattordici
E    : 	when input=(11012013014,) 
E   		'unomiliardiunmiliardouno' != 'undicimiliardidodicimilionitredicimilaquattordici'	<- correct return value
_____________________________ Test.test_program_14 _____________________________

self = <grade02.Test testMethod=test_program_14>

    def test_program_14(self):
        'numero massimo da convertire'
        num      = 99999999999
        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'
>       return self.dotest02(num, expected)

grade02.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'novemiliardinovemiliardinovecentonovantanove[47 chars]nove' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'
E   - novemiliardinovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove
E   ?    ----- ^^^
E   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove
E   ?     ^^^
E    : 	when input=(99999999999,) 
E   		'novemiliardinovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'	<- correct return value
_____________________________ Test.test_program_9 ______________________________

self = <grade02.Test testMethod=test_program_9>

    def test_program_9(self):
        'non elisioni 800-8 e elisioni 800-80'
        num      = 808080808080
        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
>       return self.dotest02(num, expected)

grade02.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:85: in conv
    return conv(int(n/10000000000))+ "miliardi" + conv(n%10000000000)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 80

    def conv(n):
        if n in range(1,10):
            return ("uno", "due", "tre", "quattro", "cinque",               # cambia il numero in input da cifra a lettere nel range
                    "sei", "sette", "otto", "nove")[n-1]                    # da 1 a 9.
    
    
        if n in range(10,20):                                               # torna il numero in input da cifra a lettere nel range
            return ("dieci", "undici", "dodici", "tredici"                  # da 10 a 19.
                    "quattordici", "quindici", "sedici",
                    "diciassette", "diciotto","dicianove")[n-11]
    
        if n in range(20,100):                                              # l'insieme k rappresenta la traduzione da cifre a lettere
            k = ("venti", "trenta", "quaranta",                              # di tutte le decine .
                         "cinquanta", "sessanta", "settanta",
                         "ottanta", "novanta")
            c = k[int(n/10)-2]                                              # cambio tutti i numeri da 20 a 99 in lettere specialmente
            b = n%10                                                        # tutti i numeri che eludono le finali, tutte le decine
            if b == 1 or b == 8:                                            # da 1 a 8, ad esempio 21 e 38.
                c = c[:-1]
>           return c + conv(n%10)
E           TypeError: must be str, not NoneType

program02.py:53: TypeError
 generated json report: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1762390/homework01/program02.log.json 
====================== 6 failed, 8 passed in 0.15 seconds ======================
