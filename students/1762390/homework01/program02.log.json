{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0035016536712646484, "run_index": 0, "setup": {"name": "setup", "duration": 0.0015027523040771484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028133392333984375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002148151397705078, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001264333724975586, "run_index": 1, "setup": {"name": "setup", "duration": 0.00027298927307128906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004360675811767578, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:85: in conv\n    return conv(int(n/10000000000))+ \"miliardi\" + conv(n%10000000000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 80\n\n    def conv(n):\n        if n in range(1,10):\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",               # cambia il numero in input da cifra a lettere nel range\n                    \"sei\", \"sette\", \"otto\", \"nove\")[n-1]                    # da 1 a 9.\n    \n    \n        if n in range(10,20):                                               # torna il numero in input da cifra a lettere nel range\n            return (\"dieci\", \"undici\", \"dodici\", \"tredici\"                  # da 10 a 19.\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\",\"dicianove\")[n-11]\n    \n        if n in range(20,100):                                              # l'insieme k rappresenta la traduzione da cifre a lettere\n            k = (\"venti\", \"trenta\", \"quaranta\",                              # di tutte le decine .\n                         \"cinquanta\", \"sessanta\", \"settanta\",\n                         \"ottanta\", \"novanta\")\n            c = k[int(n/10)-2]                                              # cambio tutti i numeri da 20 a 99 in lettere specialmente\n            b = n%10                                                        # tutti i numeri che eludono le finali, tutte le decine\n            if b == 1 or b == 8:                                            # da 1 a 8, ad esempio 21 e 38.\n                c = c[:-1]\n>           return c + conv(n%10)\nE           TypeError: must be str, not NoneType\n\nprogram02.py:53: TypeError"}, "teardown": {"name": "teardown", "duration": 0.00028228759765625, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0018863677978515625, "run_index": 2, "setup": {"name": "setup", "duration": 0.0003046989440917969, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0010013580322265625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'seimiliardiottomiliardiduecentocinquantotto[40 chars]otto' != 'sessantottomiliardiduecentocinquantottomili[36 chars]otto'\nE   - seimiliardiottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE   ?   ^^^^^ ^^^\nE   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE   ?   ^^ ^^\nE    : \twhen input=(68258148238,) \nE   \t\t'seimiliardiottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027561187744140625, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0013048648834228516, "run_index": 3, "setup": {"name": "setup", "duration": 0.0003025531768798828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004684925079345703, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottomiliardiunmiliardouno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\nE   - ottomiliardiunmiliardouno\nE   + ottantunomiliardisettantunomilioninovantunomilaventuno\nE    : \twhen input=(81071091021,) \nE   \t\t'ottomiliardiunmiliardouno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00023126602172851562, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.001176595687866211, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002841949462890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000396728515625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'unomiliardiunmiliardouno' != 'undicimiliardidodicimilionitredicimilaquattordici'\nE   - unomiliardiunmiliardouno\nE   + undicimiliardidodicimilionitredicimilaquattordici\nE    : \twhen input=(11012013014,) \nE   \t\t'unomiliardiunmiliardouno' != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00021147727966308594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0018496513366699219, "run_index": 5, "setup": {"name": "setup", "duration": 0.000286102294921875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0010006427764892578, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novemiliardinovemiliardinovecentonovantanove[47 chars]nove' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'\nE   - novemiliardinovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE   ?    ----- ^^^\nE   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE   ?     ^^^\nE    : \twhen input=(99999999999,) \nE   \t\t'novemiliardinovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027680397033691406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.00104522705078125, "run_index": 6, "setup": {"name": "setup", "duration": 0.0003006458282470703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002548694610595703, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018906593322753906, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0010161399841308594, "run_index": 7, "setup": {"name": "setup", "duration": 0.00029778480529785156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002334117889404297, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018715858459472656, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009372234344482422, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002586841583251953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002315044403076172, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018835067749023438, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009577274322509766, "run_index": 9, "setup": {"name": "setup", "duration": 0.00026488304138183594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002338886260986328, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019407272338867188, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009341239929199219, "run_index": 10, "setup": {"name": "setup", "duration": 0.00025653839111328125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002357959747314453, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018525123596191406, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0009486675262451172, "run_index": 11, "setup": {"name": "setup", "duration": 0.000255584716796875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002529621124267578, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018453598022460938, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0010521411895751953, "run_index": 12, "setup": {"name": "setup", "duration": 0.0003046989440917969, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002579689025878906, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018477439880371094, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0014426708221435547, "run_index": 13, "setup": {"name": "setup", "duration": 0.00025653839111328125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026988983154296875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:85: in conv\n    return conv(int(n/10000000000))+ \"miliardi\" + conv(n%10000000000)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 80\n\n    def conv(n):\n        if n in range(1,10):\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",               # cambia il numero in input da cifra a lettere nel range\n                    \"sei\", \"sette\", \"otto\", \"nove\")[n-1]                    # da 1 a 9.\n    \n    \n        if n in range(10,20):                                               # torna il numero in input da cifra a lettere nel range\n            return (\"dieci\", \"undici\", \"dodici\", \"tredici\"                  # da 10 a 19.\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\",\"dicianove\")[n-11]\n    \n        if n in range(20,100):                                              # l'insieme k rappresenta la traduzione da cifre a lettere\n            k = (\"venti\", \"trenta\", \"quaranta\",                              # di tutte le decine .\n                         \"cinquanta\", \"sessanta\", \"settanta\",\n                         \"ottanta\", \"novanta\")\n            c = k[int(n/10)-2]                                              # cambio tutti i numeri da 20 a 99 in lettere specialmente\n            b = n%10                                                        # tutti i numeri che eludono le finali, tutte le decine\n            if b == 1 or b == 8:                                            # da 1 a 8, ad esempio 21 e 38.\n                c = c[:-1]\n>           return c + conv(n%10)\nE           TypeError: must be str, not NoneType\n\nprogram02.py:53: TypeError"}, "teardown": {"name": "teardown", "duration": 0.0006597042083740234, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 8, "failed": 6, "num_tests": 14, "duration": 0.15307855606079102}, "created_at": "2018-08-01 00:29:31.545125"}}