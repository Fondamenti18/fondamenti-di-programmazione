{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.003486156463623047, "run_index": 0, "setup": {"name": "setup", "duration": 0.001504659652709961, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002713203430175781, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00020551681518554688, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001195669174194336, "run_index": 1, "setup": {"name": "setup", "duration": 0.0002624988555908203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003910064697265625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 801081801081\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n                   \"milioni\" + \\\n                   Numberotesto(n%1000000)\n    \n        elif n <= 1999999999:\n            return \"unmiliardo\" + Numberotesto(n%1000000000)\n    \n        elif n<=1999999999999:\n>           return \"unbiliardo\" + numerotesto (n%1000000000000)\nE           NameError: name 'numerotesto' is not defined\n\nprogram02.py:88: NameError"}, "teardown": {"name": "teardown", "duration": 0.0002796649932861328, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0011975765228271484, "run_index": 2, "setup": {"name": "setup", "duration": 0.0003044605255126953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003151893615722656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 68258148238\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n                   \"milioni\" + \\\n                   Numberotesto(n%1000000)\n    \n        elif n <= 1999999999:\n            return \"unmiliardo\" + Numberotesto(n%1000000000)\n    \n        elif n<=1999999999999:\n>           return \"unbiliardo\" + numerotesto (n%1000000000000)\nE           NameError: name 'numerotesto' is not defined\n\nprogram02.py:88: NameError"}, "teardown": {"name": "teardown", "duration": 0.0002734661102294922, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0011286735534667969, "run_index": 3, "setup": {"name": "setup", "duration": 0.0002980232238769531, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002639293670654297, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 81071091021\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n                   \"milioni\" + \\\n                   Numberotesto(n%1000000)\n    \n        elif n <= 1999999999:\n            return \"unmiliardo\" + Numberotesto(n%1000000000)\n    \n        elif n<=1999999999999:\n>           return \"unbiliardo\" + numerotesto (n%1000000000000)\nE           NameError: name 'numerotesto' is not defined\n\nprogram02.py:88: NameError"}, "teardown": {"name": "teardown", "duration": 0.00026869773864746094, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0011432170867919922, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002989768981933594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002665519714355469, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 11012013014\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n                   \"milioni\" + \\\n                   Numberotesto(n%1000000)\n    \n        elif n <= 1999999999:\n            return \"unmiliardo\" + Numberotesto(n%1000000000)\n    \n        elif n<=1999999999999:\n>           return \"unbiliardo\" + numerotesto (n%1000000000000)\nE           NameError: name 'numerotesto' is not defined\n\nprogram02.py:88: NameError"}, "teardown": {"name": "teardown", "duration": 0.00027871131896972656, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0011546611785888672, "run_index": 5, "setup": {"name": "setup", "duration": 0.0003046989440917969, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002684593200683594, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 99999999999\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n                   \"milioni\" + \\\n                   Numberotesto(n%1000000)\n    \n        elif n <= 1999999999:\n            return \"unmiliardo\" + Numberotesto(n%1000000000)\n    \n        elif n<=1999999999999:\n>           return \"unbiliardo\" + numerotesto (n%1000000000000)\nE           NameError: name 'numerotesto' is not defined\n\nprogram02.py:88: NameError"}, "teardown": {"name": "teardown", "duration": 0.00027680397033691406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0010349750518798828, "run_index": 6, "setup": {"name": "setup", "duration": 0.0003001689910888672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024819374084472656, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018644332885742188, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.001031637191772461, "run_index": 7, "setup": {"name": "setup", "duration": 0.00025844573974609375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002455711364746094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_3>\n\n    def test_program_3(self):\n        \"non-elisione del cento e elisione del venti-otto\"\n        num      = 128\n        expected = 'centoventotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 128\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n>           return \"cento\" + Numberotesto(n%100)\nE           NameError: name 'Numberotesto' is not defined\n\nprogram02.py:56: NameError"}, "teardown": {"name": "teardown", "duration": 0.00026917457580566406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0011057853698730469, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002980232238769531, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002665519714355469, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_4>\n\n    def test_program_4(self):\n        \"non-elisione del cento\"\n        num      = 508\n        expected = 'cinquecentootto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 508\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n>           y = int(m/10)\nE           NameError: name 'm' is not defined\n\nprogram02.py:60: NameError"}, "teardown": {"name": "teardown", "duration": 0.00024318695068359375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0010733604431152344, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002949237823486328, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002551078796386719, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_5>\n\n    def test_program_5(self):\n        \"non-elisione del mille e del cento\"\n        num      = 1501\n        expected = 'millecinquecentouno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 1501\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n>           return \"mille\" + Numberotesto(n%1000)\nE           NameError: name 'Numberotesto' is not defined\n\nprogram02.py:69: NameError"}, "teardown": {"name": "teardown", "duration": 0.00022840499877929688, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009691715240478516, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002646446228027344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023794174194335938, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 17081\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n>                  \"mila\" + \\\n                   Numberotesto(n%1000)\nE           NameError: name 'Numberotesto' is not defined\n\nprogram02.py:73: NameError"}, "teardown": {"name": "teardown", "duration": 0.00020194053649902344, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0010104179382324219, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002677440643310547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024127960205078125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 981008818\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n>                  \"milioni\" + \\\n                   Numberotesto(n%1000000)\nE           NameError: name 'Numberotesto' is not defined\n\nprogram02.py:81: NameError"}, "teardown": {"name": "teardown", "duration": 0.00023365020751953125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0010995864868164062, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002911090850830078, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025582313537597656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 888888888\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n>                  \"milioni\" + \\\n                   Numberotesto(n%1000000)\nE           NameError: name 'Numberotesto' is not defined\n\nprogram02.py:81: NameError"}, "teardown": {"name": "teardown", "duration": 0.00026154518127441406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0015041828155517578, "run_index": 13, "setup": {"name": "setup", "duration": 0.00029969215393066406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002608299255371094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 808080808080\n\n    def conv(n):\n        if n == 0:\n            return \"\"\n    \n        elif n <= 19:\n            return (\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\",\n                    \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n                    \"undici\", \"dodici\", \"tredici\",\n                    \"quattordici\", \"quindici\", \"sedici\",\n                    \"diciassette\", \"diciotto\", \"diciannove\")[n-1]\n    \n        elif n <= 99:\n            decine = (\"venti\", \"trenta\", \"quaranta\",\n                      \"cinquanta\", \"sessanta\",\n                      \"settanta\", \"ottanta\", \"novanta\")\n            lettere = decine[int(n/10)-2]\n            x = n%10\n            if x == 1 or x == 8:\n                lettere = lettere[:-1]\n            return lettere + Numberotesto(n%10)\n    \n        elif n <= 199:\n            return \"cento\" + Numberotesto(n%100)\n    \n        elif n <= 999:\n            y = n%100\n            y = int(m/10)\n            lettere = \"cent\"\n            if y != 8:\n                lettere = lettere + \"o\"\n            return Numberotesto( int(n/100)) + \\\n                   lettere + \\\n                   Numberotesto(n%100)\n    \n        elif n<= 1999 :\n            return \"mille\" + Numberotesto(n%1000)\n    \n        elif n<= 999999:\n            return Numberotesto(int(n/1000)) + \\\n                   \"mila\" + \\\n                   Numberotesto(n%1000)\n    \n        elif n <= 1999999:\n            return \"unmilione\" + Numberotesto(n%1000000)\n    \n        elif n <= 999999999:\n            return Numberotesto(int(n/1000000))+ \\\n                   \"milioni\" + \\\n                   Numberotesto(n%1000000)\n    \n        elif n <= 1999999999:\n            return \"unmiliardo\" + Numberotesto(n%1000000000)\n    \n        elif n<=1999999999999:\n>           return \"unbiliardo\" + numerotesto (n%1000000000000)\nE           NameError: name 'numerotesto' is not defined\n\nprogram02.py:88: NameError"}, "teardown": {"name": "teardown", "duration": 0.0006439685821533203, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 2, "failed": 12, "num_tests": 14, "duration": 0.23447656631469727}, "created_at": "2018-08-01 00:29:22.855437"}}