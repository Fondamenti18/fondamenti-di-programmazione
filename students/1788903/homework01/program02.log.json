{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0034775733947753906, "run_index": 0, "setup": {"name": "setup", "duration": 0.001478433609008789, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028204917907714844, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00023865699768066406, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.0012519359588623047, "run_index": 1, "setup": {"name": "setup", "duration": 0.0002741813659667969, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004420280456542969, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno' : \twhen input=(801081801081,) \nE   \t\tNone != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00026154518127441406, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0011143684387207031, "run_index": 2, "setup": {"name": "setup", "duration": 0.00029468536376953125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003209114074707031, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'sessantottomiliardiduecentocinquantottom[39 chars]otto' : \twhen input=(68258148238,) \nE   \t\tNone != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002040863037109375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0010640621185302734, "run_index": 3, "setup": {"name": "setup", "duration": 0.00026035308837890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002715587615966797, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottantunomiliardisettantunomilioninovantunomilaventuno' : \twhen input=(81071091021,) \nE   \t\tNone != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027179718017578125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0012040138244628906, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002963542938232422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003082752227783203, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'undicimiliardidodicimilionitredicimilaquattordici' : \twhen input=(11012013014,) \nE   \t\tNone != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00030303001403808594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0012094974517822266, "run_index": 5, "setup": {"name": "setup", "duration": 0.0003027915954589844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00032830238342285156, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'novantanovemiliardinovecentonovantanovem[46 chars]nove' : \twhen input=(99999999999,) \nE   \t\tNone != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027561187744140625, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.001058340072631836, "run_index": 6, "setup": {"name": "setup", "duration": 0.0003056526184082031, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025916099548339844, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018787384033203125, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009317398071289062, "run_index": 7, "setup": {"name": "setup", "duration": 0.00025582313537597656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002346038818359375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018548965454101562, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009663105010986328, "run_index": 8, "setup": {"name": "setup", "duration": 0.00025534629821777344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002713203430175781, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001842975616455078, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009315013885498047, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002543926239013672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024008750915527344, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018262863159179688, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009264945983886719, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002536773681640625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002377033233642578, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018143653869628906, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0015690326690673828, "run_index": 11, "setup": {"name": "setup", "duration": 0.00025916099548339844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0007777214050292969, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentoottantunomilioniottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\nE   - novecentoottantunomilioniottomilaottocentodiciotto\nE   ?         -\nE   + novecentottantunomilioniottomilaottocentodiciotto\nE    : \twhen input=(981008818,) \nE   \t\t'novecentoottantunomilioniottomilaottocentodiciotto' != 'novecentottantunomilioniottomilaottocentodiciotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027298927307128906, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0018489360809326172, "run_index": 12, "setup": {"name": "setup", "duration": 0.00030303001403808594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0009672641754150391, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottocentoottantottomilioniottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\nE   - ottocentoottantottomilioniottomilaottocentoottantotto\nE   ?         -                                  -\nE   + ottocentottantottomilioniottocentottantottomilaottocentottantotto\nE   ?                              ++++++++++++++\nE    : \twhen input=(888888888,) \nE   \t\t'ottocentoottantottomilioniottomilaottocentoottantotto' != 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00027561187744140625, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0015876293182373047, "run_index": 13, "setup": {"name": "setup", "duration": 0.00029969215393066406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0003101825714111328, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: None != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta' : \twhen input=(808080808080,) \nE   \t\tNone != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0006780624389648438, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 6, "failed": 8, "num_tests": 14, "duration": 0.16810917854309082}, "created_at": "2018-08-01 00:29:39.558114"}}