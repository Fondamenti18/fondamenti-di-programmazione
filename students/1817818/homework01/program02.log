============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.7.0, py-1.5.2, pluggy-0.7.1 -- /home/travis/virtualenv/python3.6.3/bin/python
cachedir: .pytest_cache
rootdir: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1817818/homework01, inifile:
plugins: timeout-1.3.1, json-0.4.0
timeout: 10.0s
timeout method: signal
timeout func_only: False
collecting ... collected 14 items

grade02.py::Test::test_program_1 PASSED                                  [  7%]
grade02.py::Test::test_program_10 FAILED                                 [ 14%]
grade02.py::Test::test_program_11 FAILED                                 [ 21%]
grade02.py::Test::test_program_12 FAILED                                 [ 28%]
grade02.py::Test::test_program_13 PASSED                                 [ 35%]
grade02.py::Test::test_program_14 FAILED                                 [ 42%]
grade02.py::Test::test_program_2 PASSED                                  [ 50%]
grade02.py::Test::test_program_3 FAILED                                  [ 57%]
grade02.py::Test::test_program_4 FAILED                                  [ 64%]
grade02.py::Test::test_program_5 FAILED                                  [ 71%]
grade02.py::Test::test_program_6 FAILED                                  [ 78%]
grade02.py::Test::test_program_7 FAILED                                  [ 85%]
grade02.py::Test::test_program_8 FAILED                                  [ 92%]
grade02.py::Test::test_program_9 FAILED                                  [100%]

=================================== FAILURES ===================================
_____________________________ Test.test_program_10 _____________________________

self = <grade02.Test testMethod=test_program_10>

    def test_program_10(self):
        'non elisioni 800-1 e elisioni 80-1'
        num      = 801081801081
        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:132: in conv
    numeroC = conv12(n)
program02.py:99: in conv12
    numeroC = conv3(n[0:3])+'miliardi'+conv9(n[3:])
program02.py:76: in conv9
    numeroC = conv8(n[1:])
program02.py:71: in conv8
    numeroC = conv2(n[0:2])+'milioni'+conv6(n[2:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '81'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_11 _____________________________

self = <grade02.Test testMethod=test_program_11>

    def test_program_11(self):
        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'
        num      = 68258148238
        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'
>       return self.dotest02(num, expected)

grade02.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:130: in conv
    numeroC = conv11(n)
program02.py:93: in conv11
    numeroC = conv2(n[0:2])+'miliardi'+conv9(n[2:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '68'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_12 _____________________________

self = <grade02.Test testMethod=test_program_12>

    def test_program_12(self):
        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'
        num      = 81071091021
        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'
>       return self.dotest02(num, expected)

grade02.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:130: in conv
    numeroC = conv11(n)
program02.py:93: in conv11
    numeroC = conv2(n[0:2])+'miliardi'+conv9(n[2:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '81'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_14 _____________________________

self = <grade02.Test testMethod=test_program_14>

    def test_program_14(self):
        'numero massimo da convertire'
        num      = 99999999999
        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'
>       return self.dotest02(num, expected)

grade02.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:130: in conv
    numeroC = conv11(n)
program02.py:93: in conv11
    numeroC = conv2(n[0:2])+'miliardi'+conv9(n[2:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '99'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_3 ______________________________

self = <grade02.Test testMethod=test_program_3>

    def test_program_3(self):
        "non-elisione del cento e elisione del venti-otto"
        num      = 128
        expected = 'centoventotto'
>       return self.dotest02(num, expected)

grade02.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:114: in conv
    numeroC = conv3(n)
program02.py:27: in conv3
    numeroC = 'cento'+conv2(n[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '28'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_4 ______________________________

self = <grade02.Test testMethod=test_program_4>

    def test_program_4(self):
        "non-elisione del cento"
        num      = 508
        expected = 'cinquecentootto'
>       return self.dotest02(num, expected)

grade02.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'cinquecento' != 'cinquecentootto'
E   - cinquecento
E   + cinquecentootto
E   ?            ++++
E    : 	when input=(508,) 
E   		'cinquecento' != 'cinquecentootto'	<- correct return value
_____________________________ Test.test_program_5 ______________________________

self = <grade02.Test testMethod=test_program_5>

    def test_program_5(self):
        "non-elisione del mille e del cento"
        num      = 1501
        expected = 'millecinquecentouno'
>       return self.dotest02(num, expected)

grade02.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:13: in dotest02
    self.__check(ret,   expected_result, orig, 'return')
grade02.py:110: in __check
    self.assertEqual(value, expected, msg)
E   AssertionError: 'millecinquecento' != 'millecinquecentouno'
E   - millecinquecento
E   + millecinquecentouno
E   ?                 +++
E    : 	when input=(1501,) 
E   		'millecinquecento' != 'millecinquecentouno'	<- correct return value
_____________________________ Test.test_program_6 ______________________________

self = <grade02.Test testMethod=test_program_6>

    def test_program_6(self):
        "non-elisione del mille e elisione di 80"
        num      = 17081
        expected = 'diciassettemilaottantuno'
>       return self.dotest02(num, expected)

grade02.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:118: in conv
    numeroC = conv5(n)
program02.py:48: in conv5
    numeroC = conv2(n[0:2])+'mila'+conv3(n[2:])
program02.py:22: in conv3
    numeroC = conv2(n[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '81'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_7 ______________________________

self = <grade02.Test testMethod=test_program_7>

    def test_program_7(self):
        "numero grande con molte elisioni e non-elisioni"
        num      = 981008818
        expected = 'novecentottantunomilioniottomilaottocentodiciotto'
>       return self.dotest02(num, expected)

grade02.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:126: in conv
    numeroC = conv9(n)
program02.py:78: in conv9
    numeroC = conv3(n[0:3])+'milioni'+conv6(n[3:])
program02.py:30: in conv3
    numeroC = conv1(n[0])+'cent'+conv2(n[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '81'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_8 ______________________________

self = <grade02.Test testMethod=test_program_8>

    def test_program_8(self):
        "elisioni 800-80 e 80-8"
        num      = 888888888
        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'
>       return self.dotest02(num, expected)

grade02.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:126: in conv
    numeroC = conv9(n)
program02.py:78: in conv9
    numeroC = conv3(n[0:3])+'milioni'+conv6(n[3:])
program02.py:30: in conv3
    numeroC = conv1(n[0])+'cent'+conv2(n[1:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '88'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
_____________________________ Test.test_program_9 ______________________________

self = <grade02.Test testMethod=test_program_9>

    def test_program_9(self):
        'non elisioni 800-8 e elisioni 800-80'
        num      = 808080808080
        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'
>       return self.dotest02(num, expected)

grade02.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
grade02.py:12: in dotest02
    ret  = program.conv(*args)
program02.py:132: in conv
    numeroC = conv12(n)
program02.py:99: in conv12
    numeroC = conv3(n[0:3])+'miliardi'+conv9(n[3:])
program02.py:76: in conv9
    numeroC = conv8(n[1:])
program02.py:71: in conv8
    numeroC = conv2(n[0:2])+'milioni'+conv6(n[2:])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = '80'

    def conv2(n):
        numeroC = ''
        if n[0]=='0':
            numeriC = conv1(n[1])
        if n[0]=='1':
            numeroC = numeriB[int(n[1])]
        elif n[0]!='1' and n[0]!='0':
>           temp = numeroC[int(n[0])]
E           IndexError: string index out of range

program02.py:13: IndexError
 generated json report: /home/travis/build/Fondamenti18/fondamenti-di-programmazione/students/1817818/homework01/program02.log.json 
===================== 11 failed, 3 passed in 0.34 seconds ======================
