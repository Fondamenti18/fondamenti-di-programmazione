{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0032820701599121094, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013349056243896484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004062652587890625, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00020599365234375, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001079559326171875, "run_index": 1, "setup": {"name": "setup", "duration": 0.0002675056457519531, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00028395652770996094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:132: in conv\n    numeroC = conv12(n)\nprogram02.py:99: in conv12\n    numeroC = conv3(n[0:3])+'miliardi'+conv9(n[3:])\nprogram02.py:76: in conv9\n    numeroC = conv8(n[1:])\nprogram02.py:71: in conv8\n    numeroC = conv2(n[0:2])+'milioni'+conv6(n[2:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '81'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002605915069580078, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0011186599731445312, "run_index": 2, "setup": {"name": "setup", "duration": 0.00029850006103515625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00027298927307128906, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:130: in conv\n    numeroC = conv11(n)\nprogram02.py:93: in conv11\n    numeroC = conv2(n[0:2])+'miliardi'+conv9(n[2:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '68'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002486705780029297, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0011761188507080078, "run_index": 3, "setup": {"name": "setup", "duration": 0.0003209114074707031, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026988983154296875, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:130: in conv\n    numeroC = conv11(n)\nprogram02.py:93: in conv11\n    numeroC = conv2(n[0:2])+'miliardi'+conv9(n[2:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '81'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002644062042236328, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0010538101196289062, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002980232238769531, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00026726722717285156, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019049644470214844, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0010159015655517578, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002651214599609375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002536773681640625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:130: in conv\n    numeroC = conv11(n)\nprogram02.py:93: in conv11\n    numeroC = conv2(n[0:2])+'miliardi'+conv9(n[2:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '99'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002319812774658203, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0010018348693847656, "run_index": 6, "setup": {"name": "setup", "duration": 0.00028228759765625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002453327178955078, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001919269561767578, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.001035928726196289, "run_index": 7, "setup": {"name": "setup", "duration": 0.00028705596923828125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002512931823730469, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_3>\n\n    def test_program_3(self):\n        \"non-elisione del cento e elisione del venti-otto\"\n        num      = 128\n        expected = 'centoventotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:114: in conv\n    numeroC = conv3(n)\nprogram02.py:27: in conv3\n    numeroC = 'cento'+conv2(n[1:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '28'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002105236053466797, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.001215219497680664, "run_index": 8, "setup": {"name": "setup", "duration": 0.00026726722717285156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.000461578369140625, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_4>\n\n    def test_program_4(self):\n        \"non-elisione del cento\"\n        num      = 508\n        expected = 'cinquecentootto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'cinquecento' != 'cinquecentootto'\nE   - cinquecento\nE   + cinquecentootto\nE   ?            ++++\nE    : \twhen input=(508,) \nE   \t\t'cinquecento' != 'cinquecentootto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00021910667419433594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0012412071228027344, "run_index": 9, "setup": {"name": "setup", "duration": 0.00027751922607421875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0004482269287109375, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_5>\n\n    def test_program_5(self):\n        \"non-elisione del mille e del cento\"\n        num      = 1501\n        expected = 'millecinquecentouno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'millecinquecento' != 'millecinquecentouno'\nE   - millecinquecento\nE   + millecinquecentouno\nE   ?                 +++\nE    : \twhen input=(1501,) \nE   \t\t'millecinquecento' != 'millecinquecentouno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00023794174194335938, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0010533332824707031, "run_index": 10, "setup": {"name": "setup", "duration": 0.00027060508728027344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025725364685058594, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:118: in conv\n    numeroC = conv5(n)\nprogram02.py:48: in conv5\n    numeroC = conv2(n[0:2])+'mila'+conv3(n[2:])\nprogram02.py:22: in conv3\n    numeroC = conv2(n[1:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '81'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002548694610595703, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.00125885009765625, "run_index": 11, "setup": {"name": "setup", "duration": 0.0003256797790527344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00033974647521972656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:126: in conv\n    numeroC = conv9(n)\nprogram02.py:78: in conv9\n    numeroC = conv3(n[0:3])+'milioni'+conv6(n[3:])\nprogram02.py:30: in conv3\n    numeroC = conv1(n[0])+'cent'+conv2(n[1:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '81'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002677440643310547, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0011494159698486328, "run_index": 12, "setup": {"name": "setup", "duration": 0.0002987384796142578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002944469451904297, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:126: in conv\n    numeroC = conv9(n)\nprogram02.py:78: in conv9\n    numeroC = conv3(n[0:3])+'milioni'+conv6(n[3:])\nprogram02.py:30: in conv3\n    numeroC = conv1(n[0])+'cent'+conv2(n[1:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '88'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002574920654296875, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0014767646789550781, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002918243408203125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002789497375488281, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\nprogram02.py:132: in conv\n    numeroC = conv12(n)\nprogram02.py:99: in conv12\n    numeroC = conv3(n[0:3])+'miliardi'+conv9(n[3:])\nprogram02.py:76: in conv9\n    numeroC = conv8(n[1:])\nprogram02.py:71: in conv8\n    numeroC = conv2(n[0:2])+'milioni'+conv6(n[2:])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = '80'\n\n    def conv2(n):\n        numeroC = ''\n        if n[0]=='0':\n            numeriC = conv1(n[1])\n        if n[0]=='1':\n            numeroC = numeriB[int(n[1])]\n        elif n[0]!='1' and n[0]!='0':\n>           temp = numeroC[int(n[0])]\nE           IndexError: string index out of range\n\nprogram02.py:13: IndexError"}, "teardown": {"name": "teardown", "duration": 0.000614166259765625, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 3, "failed": 11, "num_tests": 14, "duration": 0.33357954025268555}, "created_at": "2018-08-01 00:31:22.808542"}}