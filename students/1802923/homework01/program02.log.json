{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0031778812408447266, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013489723205566406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002753734588623047, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00020456314086914062, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001531839370727539, "run_index": 1, "setup": {"name": "setup", "duration": 0.00026297569274902344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00079345703125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottantunomilioniottocentounomilaottantuno' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\nE   - ottantunomilioniottocentounomilaottantuno\nE   + ottocentounomiliardiottantunomilioniottocentounomilaottantuno\nE   ? ++++++++++++++++++++\nE    : \twhen input=(801081801081,) \nE   \t\t'ottantunomilioniottocentounomilaottantuno' != 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002124309539794922, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0014872550964355469, "run_index": 2, "setup": {"name": "setup", "duration": 0.00027298927307128906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0007338523864746094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'duecentocinquantottomilionicentoquarantot[19 chars]otto' != 'sessantottomiliardiduecentocinquantottomi[38 chars]otto'\nE   - duecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE   + sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto\nE   ? +++++++++++++++++++\nE    : \twhen input=(68258148238,) \nE   \t\t'duecentocinquantottomilionicentoquarantottomiladuecentotrentotto' != 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020742416381835938, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.0012862682342529297, "run_index": 3, "setup": {"name": "setup", "duration": 0.00026345252990722656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005519390106201172, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'settantunomilioninovantunomilaventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\nE   - settantunomilioninovantunomilaventuno\nE   + ottantunomiliardisettantunomilioninovantunomilaventuno\nE   ? +++++++++++++++++\nE    : \twhen input=(81071091021,) \nE   \t\t'settantunomilioninovantunomilaventuno' != 'ottantunomiliardisettantunomilioninovantunomilaventuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020742416381835938, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0012843608856201172, "run_index": 4, "setup": {"name": "setup", "duration": 0.00026535987854003906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005443096160888672, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'dodicimilionitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\nE   - dodicimilionitredicimilaquattordici\nE   + undicimiliardidodicimilionitredicimilaquattordici\nE   ? ++++++++++++++\nE    : \twhen input=(11012013014,) \nE   \t\t'dodicimilionitredicimilaquattordici' != 'undicimiliardidodicimilionitredicimilaquattordici'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.00020933151245117188, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0015490055084228516, "run_index": 5, "setup": {"name": "setup", "duration": 0.000263214111328125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0008153915405273438, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'novecentonovantanovemilioninovecentonovantan[23 chars]nove' != 'novantanovemiliardinovecentonovantanovemilio[42 chars]nove'\nE   - novecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE   + novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove\nE   ? +++++++++++++++++++\nE    : \twhen input=(99999999999,) \nE   \t\t'novecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove' != 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002071857452392578, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0009548664093017578, "run_index": 6, "setup": {"name": "setup", "duration": 0.0002627372741699219, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002391338348388672, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00019025802612304688, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009634494781494141, "run_index": 7, "setup": {"name": "setup", "duration": 0.0002551078796386719, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023603439331054688, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00021719932556152344, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009369850158691406, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002570152282714844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023555755615234375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018739700317382812, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009348392486572266, "run_index": 9, "setup": {"name": "setup", "duration": 0.0002560615539550781, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023484230041503906, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018787384033203125, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0009489059448242188, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002541542053222656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002472400665283203, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001933574676513672, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0009558200836181641, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002586841583251953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025081634521484375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001876354217529297, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0009520053863525391, "run_index": 12, "setup": {"name": "setup", "duration": 0.000255584716796875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00025343894958496094, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018739700317382812, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0016634464263916016, "run_index": 13, "setup": {"name": "setup", "duration": 0.00025963783264160156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005927085876464844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'ottantamilioniottocentoottomilaottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\nE   - ottantamilioniottocentoottomilaottanta\nE   + ottocentoottomiliardiottantamilioniottocentoottomilaottanta\nE   ? +++++++++++++++++++++\nE    : \twhen input=(808080808080,) \nE   \t\t'ottantamilioniottocentoottomilaottanta' != 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0005514621734619141, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 8, "failed": 6, "num_tests": 14, "duration": 0.14252781867980957}, "created_at": "2018-08-01 00:30:24.053316"}}