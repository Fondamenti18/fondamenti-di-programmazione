{"report": {"environment": {"Python": "3.6.3", "Platform": "Linux-4.14.12-041412-generic-x86_64-with-debian-jessie-sid"}, "tests": [{"name": "grade02.py::Test::test_program_1", "duration": 0.0032074451446533203, "run_index": 0, "setup": {"name": "setup", "duration": 0.0013685226440429688, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002651214599609375, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002052783966064453, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_10", "duration": 0.001150369644165039, "run_index": 1, "setup": {"name": "setup", "duration": 0.00026035308837890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00037360191345214844, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_10>\n\n    def test_program_10(self):\n        'non elisioni 800-1 e elisioni 80-1'\n        num      = 801081801081\n        expected = 'ottocentounomiliardiottantunomilioniottocentounomilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 801081801081\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002560615539550781, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_11", "duration": 0.0010633468627929688, "run_index": 2, "setup": {"name": "setup", "duration": 0.0002994537353515625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002608299255371094, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_11>\n\n    def test_program_11(self):\n        'elisioni sessanta-otto, cinquanta-otto, quaranta-otto, trenta-otto'\n        num      = 68258148238\n        expected = 'sessantottomiliardiduecentocinquantottomilionicentoquarantottomiladuecentotrentotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 68258148238\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.00020360946655273438, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_12", "duration": 0.000965118408203125, "run_index": 3, "setup": {"name": "setup", "duration": 0.0002605915069580078, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00023984909057617188, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_12>\n\n    def test_program_12(self):\n        'elisioni ottanta-uno,settanta-uno,novanta-uno, venti-uno'\n        num      = 81071091021\n        expected = 'ottantunomiliardisettantunomilioninovantunomilaventuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 81071091021\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0002040863037109375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_13", "duration": 0.0009839534759521484, "run_index": 4, "setup": {"name": "setup", "duration": 0.0002644062042236328, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002467632293701172, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_13>\n\n    def test_program_13(self):\n        'numeri speciali tra 10 e 20'\n        num      = 11012013014\n        expected = 'undicimiliardidodicimilionitredicimilaquattordici'\n>       return self.dotest02(num, expected)\n\ngrade02.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 11012013014\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.00020837783813476562, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_14", "duration": 0.0009772777557373047, "run_index": 5, "setup": {"name": "setup", "duration": 0.0002655982971191406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002429485321044922, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_14>\n\n    def test_program_14(self):\n        'numero massimo da convertire'\n        num      = 99999999999\n        expected = 'novantanovemiliardinovecentonovantanovemilioninovecentonovantanovemilanovecentonovantanove'\n>       return self.dotest02(num, expected)\n\ngrade02.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 99999999999\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.00020313262939453125, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_2", "duration": 0.0009682178497314453, "run_index": 6, "setup": {"name": "setup", "duration": 0.0002620220184326172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002262592315673828, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00021791458129882812, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_3", "duration": 0.0009276866912841797, "run_index": 7, "setup": {"name": "setup", "duration": 0.00025916099548339844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022268295288085938, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018668174743652344, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_4", "duration": 0.0009150505065917969, "run_index": 8, "setup": {"name": "setup", "duration": 0.0002543926239013672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00022220611572265625, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00018405914306640625, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_5", "duration": 0.0009191036224365234, "run_index": 9, "setup": {"name": "setup", "duration": 0.00025391578674316406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0002269744873046875, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0001842975616455078, "outcome": "passed"}, "outcome": "passed"}, {"name": "grade02.py::Test::test_program_6", "duration": 0.0012106895446777344, "run_index": 10, "setup": {"name": "setup", "duration": 0.0002529621124267578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0005006790161132812, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_6>\n\n    def test_program_6(self):\n        \"non-elisione del mille e elisione di 80\"\n        num      = 17081\n        expected = 'diciassettemilaottantuno'\n>       return self.dotest02(num, expected)\n\ngrade02.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:13: in dotest02\n    self.__check(ret,   expected_result, orig, 'return')\ngrade02.py:110: in __check\n    self.assertEqual(value, expected, msg)\nE   AssertionError: 'diciassettemilattantuno' != 'diciassettemilaottantuno'\nE   - diciassettemilattantuno\nE   + diciassettemilaottantuno\nE   ?                +\nE    : \twhen input=(17081,) \nE   \t\t'diciassettemilattantuno' != 'diciassettemilaottantuno'\t<- correct return value"}, "teardown": {"name": "teardown", "duration": 0.0002040863037109375, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_7", "duration": 0.0009763240814208984, "run_index": 11, "setup": {"name": "setup", "duration": 0.0002655982971191406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024127960205078125, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_7>\n\n    def test_program_7(self):\n        \"numero grande con molte elisioni e non-elisioni\"\n        num      = 981008818\n        expected = 'novecentottantunomilioniottomilaottocentodiciotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 981008818\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.00020384788513183594, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_8", "duration": 0.0009732246398925781, "run_index": 12, "setup": {"name": "setup", "duration": 0.00026345252990722656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024056434631347656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_8>\n\n    def test_program_8(self):\n        \"elisioni 800-80 e 80-8\"\n        num      = 888888888\n        expected = 'ottocentottantottomilioniottocentottantottomilaottocentottantotto'\n>       return self.dotest02(num, expected)\n\ngrade02.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 888888888\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.00020575523376464844, "outcome": "passed"}, "outcome": "failed"}, {"name": "grade02.py::Test::test_program_9", "duration": 0.0013604164123535156, "run_index": 13, "setup": {"name": "setup", "duration": 0.0002701282501220703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00024819374084472656, "outcome": "failed", "longrepr": "self = <grade02.Test testMethod=test_program_9>\n\n    def test_program_9(self):\n        'non elisioni 800-8 e elisioni 800-80'\n        num      = 808080808080\n        expected = 'ottocentoottomiliardiottantamilioniottocentoottomilaottanta'\n>       return self.dotest02(num, expected)\n\ngrade02.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngrade02.py:12: in dotest02\n    ret  = program.conv(*args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nn = 808080808080\n\n    def conv(n):\n    \n        copia = n   #modificando uno non modifico l'altro\n        parola = ''\n    \n        ventina = ('uno' , 'due' , 'tre' , 'quattro' , 'cinque' , 'sei' , 'sette' , 'otto' , 'nove' , 'dieci' , 'undici' , 'dodici' , 'tredici' , 'quattordici' , 'quindici' , 'sedici' , 'diciassette' , 'diciotto' , 'diciannove' )\n        decine = ('vent' , 'trent' , 'quarant' , 'cinquant' , 'sessant' , 'settant' , 'ottant' , 'novant')\n        centinaia = ('cento' , 'duecento' , 'trecento' , 'quattorcento' , 'cinquecento' , 'seicento' , 'settecento' , 'ottocento' , 'novecento')\n        bandieraVenti = False\n        bandieraDecine = False\n        bandieraMigliaia = False\n    \n        if copia >= 1000 and copia <= 1999:\n            parola = parola + 'mille'\n            copia = copia - 1000\n            bandieraMigliaia == True\n        elif copia >= 2000 and copia <= 19999:\n            bandieraMigliaia == True\n            for x in range(2 , 19):\n                if copia >= (x * 1000) and copia <= ((x * 1000) + 999):\n                    parola = parola + ventina[x-1] + 'mila'\n                    break\n            copia = copia - (x * 1000)\n    \n        if copia >= 100 and copia <= 999:\n            i = 0\n            while i <  9:\n                if copia >= ((i+1) * 100) and copia <= ((i+1) * 100 + 99):\n                    parola = parola + centinaia[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+1) * 100)    #l'incremento alla riga precedente fallisce con break\n    \n    \n        if copia >= 80 and copia < 90 and (parola == '' or bandieraMigliaia == True):\n            parola = parola + 'ottant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 80 and copia < 90 and parola != '':\n            parola = parola + 'ttant'\n            copia = copia - 80\n            bandieraDecine = True\n        elif copia >= 20 and copia <= 99:\n            bandieraDecine == True\n            i = 0\n            while i <=  8:\n                if copia >= ((i+2) * 10) and copia <= ((i+2) * 10 + 9):\n                    parola = parola + decine[i]\n                    break\n                i = i + 1\n            copia = copia - ((i+2) * 10)\n            if i == 0:\n                bandieraVenti = True\n    \n    \n        if copia != 0:\n            if (copia == 8 or copia == 1) or (copia == 8 or copia == 1 and bandieraDecine == True):\n                parola = parola + ventina[copia-1]\n            elif bandieraVenti == True:\n                parola = parola + 'i' + ventina[copia-1]\n            elif bandieraDecine == True:\n                parola = parola + 'a' + ventina[copia-1]\n            else:\n>               parola = parola + ventina[copia-1]\nE               IndexError: tuple index out of range\n\nprogram02.py:97: IndexError"}, "teardown": {"name": "teardown", "duration": 0.0005719661712646484, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 5, "failed": 9, "num_tests": 14, "duration": 0.19928479194641113}, "created_at": "2018-08-01 00:30:30.381694"}}